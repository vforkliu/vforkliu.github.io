<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>forkliu</title>
  
  <subtitle>LIU JUN&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.forkliu.com/"/>
  <updated>2019-07-05T02:08:35.244Z</updated>
  <id>https://www.forkliu.com/</id>
  
  <author>
    <name>LIU JUN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Game Security:Time Speeder</title>
    <link href="https://www.forkliu.com/2019/07/02/Game-Security-Time-Speeder/"/>
    <id>https://www.forkliu.com/2019/07/02/Game-Security-Time-Speeder/</id>
    <published>2019-07-02T15:13:58.000Z</published>
    <updated>2019-07-05T02:08:35.244Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>游戏安全：综述</title>
    <link href="https://www.forkliu.com/2019/07/01/Game-Security-Overview/"/>
    <id>https://www.forkliu.com/2019/07/01/Game-Security-Overview/</id>
    <published>2019-07-01T15:28:24.000Z</published>
    <updated>2019-07-05T02:08:35.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇文章主要描述网络游戏面临哪些安全问题，出现这些安全问题的本质原因是什么，如何<br>解决这些安全问题。</p><h1 id="网络游戏为什么会有安全问题"><a href="#网络游戏为什么会有安全问题" class="headerlink" title="网络游戏为什么会有安全问题"></a>网络游戏为什么会有安全问题</h1><p>网络游戏面临的大部分安全问题都是因为网络游戏部分逻辑呈现出本地化、单机化的特点导<br>致。如果游戏所有的逻辑，资源都放在服务端是否就可以解决大部分问题呢？答案是确实可<br>以。但是由于网络、机器性能等缘故，现阶段的游戏某些计算逻辑必须放在客户端，才可以<br>实现流畅的游戏体验，客户端里的游戏资源更是放在客户端的。</p><p>如果5G普及，游戏客户端放在服务器运行，用户通过某种代理如浏览器进行游戏（就像现在<br>很多移动的云测试服务），即所谓的云游戏。可能可以解决大部分问题。不过游戏运营商需<br>要承担硬件资源，这样做，如果只是防止外挂，是否划算，需要权衡。</p><p>网络游戏具体面临哪些安全问题呢？</p><h1 id="协议破解"><a href="#协议破解" class="headerlink" title="协议破解"></a>协议破解</h1><p>通过分析游戏协议，可以将游戏里的很多操作自动化，如果完全分析清楚游戏协议，甚至都<br>不需要游戏客户端。当然这种外挂的实现成本比较大。不过这种外挂特别适合打金工作室，<br>因为打金工作室需要运行大量的客户端养号。</p><p>这类问题的解决主要靠一种动态协议的技术：游戏通道的关键数据加密，但解密的密钥是可以<br>在线变化的。当然动态协议本身也提供防止包重放等功能。</p><h1 id="UIC"><a href="#UIC" class="headerlink" title="UIC"></a>UIC</h1><p>用户信息控制，主要解决在游戏世界里，将游戏玩家产生的不当言论进行屏蔽。不当言论比<br>如：政治敏感、谩骂、广告、色情信息等。</p><p>信息过滤主要还是采用特征匹配的方式完成，随着人工智能地发展，应该会引进自然语言识<br>别相关技术。不过据笔者所知，自然语言识别还未大规模运用。</p><p>此类安全问题还包括：色情图片识别，比如玩家头像等。</p><h1 id="资源破解"><a href="#资源破解" class="headerlink" title="资源破解"></a>资源破解</h1><p>比如游戏里的珍贵皮肤、武器等，通过替换资源，自己就可以免费使用这些皮肤、武器等。这<br>类安全问题本身不会给玩家带来收益，但是这些使用资源被替换的玩家，将游戏过程录制成视<br>频，进行传播，会游戏口碑造成极坏地影响。</p><p>还有一种类型，可以给玩家带来极大地收益。比如某个比较难的关卡，通关后可以获得很丰厚<br>的奖励，如果玩家将这个关卡的地图替换为比较简单的地图，就会比较容易通关，毕竟碰撞检测<br>的逻辑都是放在本地的。</p><p>这类问题主要通过文件校验地方式解决。</p><h1 id="按键精灵"><a href="#按键精灵" class="headerlink" title="按键精灵"></a>按键精灵</h1><p>按键精灵是实现自动化操作的主要方法。通过将游戏的某些操作任务，领金币等利用按键精灵自<br>动化，也能为玩家带来极大地收益。这也是打金工作室比较喜欢的方式。</p><p>按键精灵对三消类的游戏也危害极大。</p><p>这类问题主要通过检测按键精灵本身来解决。有行业相关人员采用机器学习地方式将玩家的操作序<br>列进行分析，试图识别出某些操作序列是否是自动化完成的，但效果不好。</p><h1 id="打金工作室"><a href="#打金工作室" class="headerlink" title="打金工作室"></a>打金工作室</h1><p>打金工作室通过各种手段养号、攒游戏里的金币、稀有物品等进行售卖，会严重破坏游戏的经济<br>系统。</p><p>这类问题主要通过数据分析来解决：如账号是有聚集性比如IP地址、机器配置、玩家等级，持有的<br>装备等。</p><h1 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h1><p>这是FPS类游戏主要的作弊方式，实现透视需要解决两个问题：人物坐标计算和人物显示，显示的方<br>式可以拦截每一帧绘制结束时，在将自己的绘制指令插入进去。当然还有通过关闭深度测试等方法。<br>后续会有文章专门分析一款透视外挂的实现方式。</p><p>解决这类问题的主要方法就是坐标加密，不过要与游戏性能取得平衡。</p><h1 id="自动开枪"><a href="#自动开枪" class="headerlink" title="自动开枪"></a>自动开枪</h1><p>简单地讲就是当敌人出现时，自动瞄准自动开枪，这也是FPS类游戏的一大痛点。自动开枪部分是通过<br>模拟按键实现。</p><p>解决这类问题：检测模拟按键类软件。</p><h1 id="无后座"><a href="#无后座" class="headerlink" title="无后座"></a>无后座</h1><p>FPS类游戏的枪械如果无后座力，开枪击杀敌人的准确率将大大提高。</p><p>这类问题主要通过收集开枪时枪械的属性数据，通过后端数据分析来完成检测。</p><h1 id="无烟雾"><a href="#无烟雾" class="headerlink" title="无烟雾"></a>无烟雾</h1><p>FPS类经常会有烟雾弹类的道具，通过外挂，可以无视烟雾。</p><p>这类问题的解决方法与无后座差不多。</p><h1 id="上帝视角"><a href="#上帝视角" class="headerlink" title="上帝视角"></a>上帝视角</h1><p>也可以叫无限视距，这类外挂可以使MOBA类游戏中的所有敌人都在你的视野里，即使敌人在草丛里。之<br>所以可以实现这类外挂，本质上是坐标逻辑的计算放在本地。</p><p>这类外挂的解决方法视外挂的实现方法而定。后续会有文章详细阐述。</p><h1 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h1><p>这并不算外挂的范畴，但也对游戏的生命周期造成极大的危害，最著名的私服莫过于魔兽世界的开源服务器，<br>据本人了解，国内的私服基本上是源码泄漏或者二进制文件泄漏搭建的，很少有通过分析游戏协议，自己动<br>手写游戏服务器。</p><p>解决方法：法律。</p><h1 id="游戏漏洞"><a href="#游戏漏洞" class="headerlink" title="游戏漏洞"></a>游戏漏洞</h1><p>比如某些任务可以无限刷、在MOBA类游戏里通过发送某个数据包直接可以让对方投降，这类安全问题称为游戏<br>漏洞，一旦在线上版本被玩家发现，将造成巨大的损失，及其严重。</p><p>一般会成立游戏漏洞挖掘团队，尽可能提前发现这些危害巨大的漏洞。</p><h1 id="最后的防线"><a href="#最后的防线" class="headerlink" title="最后的防线"></a>最后的防线</h1><p>法律。如果所有的技术手段都无法解决，或者解决成本过高，可以让法务解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本篇文章主要描述网络游戏面临哪些安全问题，出现这些安全问题的本质原因是什么，如何&lt;br&gt;解决这些安全问题。&lt;/p&gt;
&lt;h1 id=&quot;网络游戏
      
    
    </summary>
    
      <category term="游戏安全" scheme="https://www.forkliu.com/categories/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="游戏" scheme="https://www.forkliu.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="安全" scheme="https://www.forkliu.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>游戏安全：维护PC端壳的一些事儿</title>
    <link href="https://www.forkliu.com/2019/06/30/Game-Security-Packer-for-PC/"/>
    <id>https://www.forkliu.com/2019/06/30/Game-Security-Packer-for-PC/</id>
    <published>2019-06-30T12:35:54.000Z</published>
    <updated>2019-07-05T02:08:35.244Z</updated>
    
    <content type="html"><![CDATA[<pre><code>笔者维护壳的时间大约在2011年-2013年这两年间，时间比较久远，很多事情都不记得了，唯一地感觉就是累，</code></pre><p>一个人维护所有游戏的加壳。在那段时间经常在凌晨两三点钟被电话叫醒，然后打车去公司处理突发情况。<br>    如何写一个针对PE文件的壳，可以参考《加密与解密》这本书。想一想当时为什么这么多问题？笔者维护这个壳<br>除了经典的壳功能，比如压缩、导入表加密等（为游戏提供基础的安全保护），还负责其他安全组件的加载，并保证<br>它们的正常运行。常见的安全组件包括：特征扫描引擎、云查引擎、协议安全模块等。<br>    维护壳经常遇到的问题：某个游戏加壳之后，不能正常运行或者游戏表现不正常，没加壳，一切正常，那么一定<br>是壳导致。这个逻辑其实没错，但是加壳之后，还启动很多安全组件，一旦出问题，需要壳的维护者确认是否是壳的<br>问题，还是其他安全组件的问题。排查问题的方法也比较简单：二分法。比如一共启动了10个安全组件，让其只加载<br>5个安全组件，看是否有问题，来定位是哪个安全组件导致的。</p><pre><code>这里记录两个具体示例：游戏花屏和无法登陆。</code></pre><h1 id="游戏花屏"><a href="#游戏花屏" class="headerlink" title="游戏花屏"></a>游戏花屏</h1><pre><code>问题描述：测试同事在某台机器上运行加壳后的游戏，游戏花屏。只在一台测试机上有问题，其他测试机器正常。问题分析：看到问题描述，感觉像是壳与特定的机器环境相互作用导致的。还是老办法：二分法。一个组件一个</code></pre><p>组件的加载运行，最后发现单独加载某个组件或者某两个组件，都不会出现花屏，单加壳也不会出现。难道是几个特定<br>的组件放在一起才会有问题？<br>    最终结论：每个安全组件和壳本身都没有问题，只是那台测试机器配置太低，加壳后会多占有内存导致的，如果不<br>加壳，写个一个DLL什么事也不干，只是分配安全组件占用的总内存，注入到没加壳的游戏进程中，也会花屏。</p><h1 id="无法登陆"><a href="#无法登陆" class="headerlink" title="无法登陆"></a>无法登陆</h1><pre><code>问题描述：某个游戏需要阻止一个特定模块的注入，因为这个模块的注入导致其他安全组件的逻辑异常，而这个特定</code></pre><p>模块使用也很大。因为壳拦截了类似LoadLibrary的函数，只需要将要阻止的模块名字加入到黑名单即可。然后对该游戏<br>加壳，经过测试，确实可以阻止目标模块的注入。但是并没有仔细测试，加壳后的游戏不能登陆，就是无法联网了。虽然<br>有开发，测试一系列流程，还是将有问题的游戏版本放到外网了，可以有时候后续的测试流程也是个摆设。<br>    原因分析：阻止了目标模块的注入，为什么该游戏就无法联网了呢，其他程序如浏览器都是可以正常访问网络的啊。<br>其实目标模块是LSP链上的一个模块，如果该模块无法加载，相对于游戏进程来说，LSP链是不正常的，故无法连网。<br>    解决办法：使用命令或者一些工具，可以对本机重置LSP链，就是所以第3方LSP模块统统不加载，即可正常连网。<br>幸亏是个DAU不大的游戏，且并不是所有机器都存在这个特定的模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;笔者维护壳的时间大约在2011年-2013年这两年间，时间比较久远，很多事情都不记得了，唯一地感觉就是累，&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个人维护所有游戏的加壳。在那段时间经常在凌晨两三点钟被电话叫醒，然后打车去公司处理突发情况。&lt;br&gt;    如何写一个
      
    
    </summary>
    
      <category term="游戏安全" scheme="https://www.forkliu.com/categories/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="游戏" scheme="https://www.forkliu.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="安全" scheme="https://www.forkliu.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="壳" scheme="https://www.forkliu.com/tags/%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>游戏安全：开篇</title>
    <link href="https://www.forkliu.com/2019/06/29/Game-Security-Preface/"/>
    <id>https://www.forkliu.com/2019/06/29/Game-Security-Preface/</id>
    <published>2019-06-29T02:48:49.000Z</published>
    <updated>2019-06-29T15:47:34.233Z</updated>
    
    <content type="html"><![CDATA[<p>笔者曾经在某厂从事网络游戏客户端安全工作8年，涉及到PC端、Android和iOS，包括FPS、MOBA和MMORPG等各种游戏类型。现在的工作不再从事游戏安全相关工作，对游戏安全这个行业既有不舍，也有无赖。为自己立个flag：计划将这8年的游戏安全相关工作经历记录下来，算是给笔者自己留个念想吧，如果能为相关从业者提供一<br>点启发，是我的荣幸。</p><p>先列个大纲，记录下来，看什么时候能完成整个游戏安全系列。</p><ul><li>总体介绍游戏可能面临哪些安全问题，有哪些防御手段，游戏安全这个系统包含哪些方面：不仅仅是客户端。</li><li>介绍在端游第1次分析的透视外挂经历</li><li>在2年端游维护壳过程中的一些趣事：让人记忆深刻的事情。</li><li>详细介绍6年移动游戏客户端安全：笔者见证了移动游戏安全从0到1的过程：<ul><li>从0开始开发一个游戏安全方案走了哪些弯路</li><li>通用游戏外挂的发展历程</li><li>每个重要外挂的防御方法</li><li>移动游戏壳开发中的一些趣事</li><li>Android 上驱动开发</li><li>VirtualApp 原理与检测方法</li></ul></li></ul><p>声明：游戏安全系列文章中的内容仅供参考，肯定有许多错误之处，愿与同行一起探讨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;笔者曾经在某厂从事网络游戏客户端安全工作8年，涉及到PC端、Android和iOS，包括FPS、MOBA和MMORPG等各种游戏类型。现在的工作不再从事游戏安全相关工作，对游戏安全这个行业既有不舍，也有无赖。为自己立个flag：计划将这8年的游戏安全相关工作经历记录下来，算
      
    
    </summary>
    
      <category term="游戏安全" scheme="https://www.forkliu.com/categories/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="游戏" scheme="https://www.forkliu.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="安全" scheme="https://www.forkliu.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux Process</title>
    <link href="https://www.forkliu.com/2019/06/27/Linux-Process/"/>
    <id>https://www.forkliu.com/2019/06/27/Linux-Process/</id>
    <published>2019-06-27T09:34:15.000Z</published>
    <updated>2019-06-27T10:39:41.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>程序是一系列指令的集合，通常存为可执行文件。进程是程序的执行过程。</p><h1 id="进程属性"><a href="#进程属性" class="headerlink" title="进程属性"></a>进程属性</h1><p>使用ps可以查看系统正在运行的进程。 ps –help显示该命令的用法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ps -e -o USER,PID,PPID,GID,NAME</span><br><span class="line">USER           PID  PPID      GID NAME                        CMD            </span><br><span class="line">root             1     0        0 init                        init</span><br><span class="line">root             2     0        0 [kthreadd]                  kthreadd</span><br><span class="line">root             3     2        0 [ksoftirqd/0]               ksoftirqd/0</span><br><span class="line">root             5     2        0 [kworker/0:0H]              kworker/0:0H</span><br><span class="line">root             6     2        0 [kworker/u16:0]             kworker/u16:0</span><br><span class="line">root             7     2        0 [rcu_preempt]               rcu_preempt</span><br><span class="line">root             8     2        0 [rcu_sched]                 rcu_sched</span><br><span class="line">root             9     2        0 [rcu_bh]                    rcu_bh</span><br></pre></td></tr></table></figure><p>USER: 进程所属用户的ID<br>PID:进程ID<br>PPID:父进程的ID<br>GID:进程组ID<br>NAME:进程名</p><h1 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h1><p>使用fork创建的子进程，父进程应该调用wait函数，等待子进程的退出信息，如果父进程先结束，子进程将变成孤儿进程，过继给init进程，<br>init进程成为它的父进程。</p><h1 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h1><p>进程组包含多个进程，进程组会有一个领导进程(process group leader)，该领导进程的PID将作为进程组的PGID。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;程序是一系列指令的集合，通常存为可执行文件。进程是程序的执行过程。&lt;/p&gt;
&lt;h1 id=&quot;进程属性&quot;&gt;&lt;a href=&quot;#进程属性&quot; cl
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.forkliu.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>The Implementation Details of Android&#39;s force-stop</title>
    <link href="https://www.forkliu.com/2019/06/26/The-Implementation-Details-of-Android-s-force-stop/"/>
    <id>https://www.forkliu.com/2019/06/26/The-Implementation-Details-of-Android-s-force-stop/</id>
    <published>2019-06-26T10:32:15.000Z</published>
    <updated>2019-06-27T09:33:43.122Z</updated>
    
    <content type="html"><![CDATA[<p>基于AOSP 8.0.1源码分析force-stop的实现细节。</p><h1 id="使用-force-stop"><a href="#使用-force-stop" class="headerlink" title="使用 force-stop"></a>使用 force-stop</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">am force-stop com.example</span><br></pre></td></tr></table></figure><p>com.example 是应用程序包名。</p><h1 id="am命令"><a href="#am命令" class="headerlink" title="am命令"></a>am命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /system/bin/am</span><br><span class="line"><span class="meta">#</span><span class="bash">!/system/bin/sh</span></span><br><span class="line">if [ "$1" != "instrument" ] ; then</span><br><span class="line">    cmd activity "$@"</span><br><span class="line">else</span><br><span class="line">    base=/system</span><br><span class="line">    export CLASSPATH=$base/framework/am.jar</span><br><span class="line">    exec app_process $base/bin com.android.commands.am.Am "$@"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>am 是一个shell脚本。如果第一个参数不等于”instrument”，就执行cmd activity。</p><h1 id="cmd-命令"><a href="#cmd-命令" class="headerlink" title="cmd 命令"></a>cmd 命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">am force-stop com.example</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd activity force-stop com.example</span><br></pre></td></tr></table></figure><p>查看cmd是个什么文件？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /system/bin</span><br><span class="line">file cmd</span><br><span class="line">cmd: ELF shared object, 64-bit LSB arm64, dynamic (/system/bin/linker64), for Android 27, BuildID=684237e221655418caf713b8cedf9382, stripped</span><br></pre></td></tr></table></figure><p>可以看出cmd是一个ELF可执行文件。<br>源码文件：frameworks/native/cmds/cmd/cmd.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    sp&lt;IServiceManager&gt; sm = defaultServiceManager();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Vector&lt;String16&gt; args;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;argc; i++) &#123;</span><br><span class="line">        args.add(String16(argv[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    String16 cmd = String16(argv[<span class="number">1</span>]);</span><br><span class="line">    sp&lt;IBinder&gt; service = sm-&gt;checkService(cmd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    sp&lt;MyShellCallback&gt; cb = <span class="keyword">new</span> MyShellCallback();</span><br><span class="line">    sp&lt;MyResultReceiver&gt; result = <span class="keyword">new</span> MyResultReceiver();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> block until a result is returned to MyResultReceiver.</span></span><br><span class="line">    <span class="keyword">status_t</span> err = IBinder::shellCommand(service, STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO, args,</span><br><span class="line">            cb, result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>args[1]  表示服务名。<br>通过ServiceManager找到对应的服务，比如第1个参数是activity，找到服务ActivityManagerService。<br>然后调用IBinder::shellCommand()。</p><h1 id="IBinder-shellCommand"><a href="#IBinder-shellCommand" class="headerlink" title="IBinder::shellCommand"></a>IBinder::shellCommand</h1><p>frameworks/native/libs/binder/Binder.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> IBinder::shellCommand(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; target, <span class="keyword">int</span> in, <span class="keyword">int</span> out, <span class="keyword">int</span> err,</span><br><span class="line">    Vector&lt;String16&gt;&amp; args, <span class="keyword">const</span> sp&lt;IShellCallback&gt;&amp; callback,</span><br><span class="line">    <span class="keyword">const</span> sp&lt;IResultReceiver&gt;&amp; resultReceiver)</span><br><span class="line">&#123;</span><br><span class="line">    Parcel send;</span><br><span class="line">    Parcel reply;</span><br><span class="line">    send.writeFileDescriptor(in);</span><br><span class="line">    send.writeFileDescriptor(out);</span><br><span class="line">    send.writeFileDescriptor(err);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> numArgs = args.size();</span><br><span class="line">    send.writeInt32(numArgs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; numArgs; i++) &#123;</span><br><span class="line">        send.writeString16(args[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    send.writeStrongBinder(callback != <span class="literal">NULL</span> ? IInterface::asBinder(callback) : <span class="literal">NULL</span>);</span><br><span class="line">    send.writeStrongBinder(resultReceiver != <span class="literal">NULL</span> ? IInterface::asBinder(resultReceiver) : <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> target-&gt;transact(SHELL_COMMAND_TRANSACTION, send, &amp;reply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数比较简单，构造一个Parcel 执行SHELL_COMMAND_TRANSCTION。</p><h1 id="AMS-onShellCommand"><a href="#AMS-onShellCommand" class="headerlink" title="AMS::onShellCommand"></a>AMS::onShellCommand</h1><p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title">IActivityManager</span>.<span class="title">Stub</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Watchdog</span>.<span class="title">Monitor</span>, <span class="title">BatteryStatsImpl</span>.<span class="title">BatteryCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShellCommand</span><span class="params">(FileDescriptor in, FileDescriptor out,</span></span></span><br><span class="line"><span class="function"><span class="params">            FileDescriptor err, String[] args, ShellCallback callback,</span></span></span><br><span class="line"><span class="function"><span class="params">            ResultReceiver resultReceiver)</span> </span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> ActivityManagerShellCommand(<span class="keyword">this</span>, <span class="keyword">false</span>)).exec(</span><br><span class="line">                <span class="keyword">this</span>, in, out, err, args, callback, resultReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exec函数在ShellCommand类里实现，最终会调用ActivityManagerShellCommand的onCommand函数。</p><h1 id="ActivityManagerShellCommand-onCommand"><a href="#ActivityManagerShellCommand-onCommand" class="headerlink" title="ActivityManagerShellCommand::onCommand"></a>ActivityManagerShellCommand::onCommand</h1><p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerShellCommand.java<br>frameworks/base/core/java/android/os/ShellCommand.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onCommand</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"force-stop"</span>:</span><br><span class="line">        <span class="keyword">return</span> runForceStop(pw);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runForceStop</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">runForceStop</span><span class="params">(PrintWriter pw)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_ALL;</span><br><span class="line"></span><br><span class="line">    String opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getNextOption()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (opt.equals(<span class="string">"--user"</span>)) &#123;</span><br><span class="line">            userId = UserHandle.parseUserArg(getNextArgRequired());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            getErrPrintWriter().println(<span class="string">"Error: Unknown option: "</span> + opt);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mInterface.forceStopPackage(getNextArgRequired(), userId);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从ActivityManagerShellCommand的构造函数中发现mInterface表示ActivityManagerService。</p><h1 id="forceStopPackage"><a href="#forceStopPackage" class="headerlink" title="forceStopPackage"></a>forceStopPackage</h1><p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forceStopPackage</span><span class="params">(<span class="keyword">final</span> String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (checkCallingPermission(android.Manifest.permission.FORCE_STOP_PACKAGES)</span><br><span class="line">            != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        String msg = <span class="string">"Permission Denial: forceStopPackage() from pid="</span></span><br><span class="line">                + Binder.getCallingPid()</span><br><span class="line">                + <span class="string">", uid="</span> + Binder.getCallingUid()</span><br><span class="line">                + <span class="string">" requires "</span> + android.Manifest.permission.FORCE_STOP_PACKAGES;</span><br><span class="line">        Slog.w(TAG, msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">    userId = mUserController.handleIncomingUser(callingPid, Binder.getCallingUid(),</span><br><span class="line">            userId, <span class="keyword">true</span>, ALLOW_FULL_ONLY, <span class="string">"forceStopPackage"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IPackageManager pm = AppGlobals.getPackageManager();</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] users = userId == UserHandle.USER_ALL</span><br><span class="line">                    ? mUserController.getUsers() : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; userId &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> user : users) &#123;</span><br><span class="line">                <span class="keyword">int</span> pkgUid = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pkgUid = pm.getPackageUid(packageName, MATCH_DEBUG_TRIAGED_MISSING,</span><br><span class="line">                            user);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pkgUid == -<span class="number">1</span>) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Invalid packageName: "</span> + packageName);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 关键点1</span></span><br><span class="line">                    pm.setPackageStoppedState(packageName, <span class="keyword">true</span>, user);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Failed trying to unstop package "</span></span><br><span class="line">                            + packageName + <span class="string">": "</span> + e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mUserController.isUserRunningLocked(user, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 关键点2</span></span><br><span class="line">                    forceStopPackageLocked(packageName, pkgUid, <span class="string">"from pid "</span> + callingPid);</span><br><span class="line">                    finishForceStopPackageLocked(packageName, pkgUid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的参数packageName 表示被杀进程的包名， userId值为UserHandle.USER_ALL。</p><h2 id="setPackageStoppedState"><a href="#setPackageStoppedState" class="headerlink" title="setPackageStoppedState"></a>setPackageStoppedState</h2><p>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPackageStoppedState</span><span class="params">(String packageName, <span class="keyword">boolean</span> stopped, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">if</span> (getInstantAppPackageName(callingUid) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> permission = mContext.checkCallingOrSelfPermission(</span><br><span class="line">            android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> allowedByPermission = (permission == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">    enforceCrossUserPermission(callingUid, userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>, <span class="string">"stop package"</span>);</span><br><span class="line">    <span class="comment">// writer</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (!filterAppAccessLPr(ps, callingUid, userId)</span><br><span class="line">                &amp;&amp; mSettings.setPackageStoppedStateLPw(<span class="keyword">this</span>, packageName, stopped,</span><br><span class="line">                        allowedByPermission, callingUid, userId)) &#123;</span><br><span class="line">            scheduleWritePackageRestrictionsLocked(userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要启动处于停止状态的应用，则只要为Intent添加 FLAG_INCLUDE_STOPPED_PACKAGES 标记即可。</p><h1 id="forceStopPackageLocked"><a href="#forceStopPackageLocked" class="headerlink" title="forceStopPackageLocked"></a>forceStopPackageLocked</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forceStopPackageLocked</span><span class="params">(<span class="keyword">final</span> String packageName, <span class="keyword">int</span> uid, String reason)</span> </span>&#123;</span><br><span class="line">    forceStopPackageLocked(packageName, UserHandle.getAppId(uid), <span class="keyword">false</span>,</span><br><span class="line">            <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, UserHandle.getUserId(uid), reason);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">forceStopPackageLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    String packageName, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> appId,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> callerWillRestart, // <span class="keyword">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> purgeCache,        // <span class="keyword">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> doit,              // <span class="keyword">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> evenPersistent,    // <span class="keyword">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> uninstalling,      // <span class="keyword">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> userId, </span></span></span><br><span class="line"><span class="function"><span class="params">    String reason</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL &amp;&amp; packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Can't force stop all processes of all users, that is insane!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (appId &lt; <span class="number">0</span> &amp;&amp; packageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            appId = UserHandle.getAppId(AppGlobals.getPackageManager()</span><br><span class="line">                    .getPackageUid(packageName, MATCH_DEBUG_TRIAGED_MISSING, <span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (doit) &#123;</span><br><span class="line">        <span class="keyword">if</span> (packageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"Force stopping "</span> + packageName + <span class="string">" appid="</span> + appId</span><br><span class="line">                    + <span class="string">" user="</span> + userId + <span class="string">": "</span> + reason);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"Force stopping u"</span> + userId + <span class="string">": "</span> + reason);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mAppErrors.resetProcessCrashTimeLocked(packageName == <span class="keyword">null</span>, appId, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理 Processes</span></span><br><span class="line">    <span class="keyword">boolean</span> didSomething = killPackageProcessesLocked(packageName, appId, userId,</span><br><span class="line">            ProcessList.INVALID_ADJ, callerWillRestart, <span class="keyword">true</span>, doit, evenPersistent,</span><br><span class="line">            packageName == <span class="keyword">null</span> ? (<span class="string">"stop user "</span> + userId) : (<span class="string">"stop "</span> + packageName));</span><br><span class="line"></span><br><span class="line">    didSomething |= mActivityStarter.clearPendingActivityLaunchesLocked(packageName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理 Activities</span></span><br><span class="line">    <span class="keyword">if</span> (mStackSupervisor.finishDisabledPackageActivitiesLocked(</span><br><span class="line">            packageName, <span class="keyword">null</span>, doit, evenPersistent, userId)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!doit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        didSomething = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理 Services</span></span><br><span class="line">    <span class="keyword">if</span> (mServices.bringDownDisabledPackageServicesLocked(</span><br><span class="line">            packageName, <span class="keyword">null</span>, userId, evenPersistent, <span class="keyword">true</span>, doit)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!doit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        didSomething = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Remove all sticky broadcasts from this user.</span></span><br><span class="line">        mStickyBroadcasts.remove(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ContentProviderRecord&gt; providers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (mProviderMap.collectPackageProvidersLocked(packageName, <span class="keyword">null</span>, doit, evenPersistent,</span><br><span class="line">            userId, providers)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!doit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        didSomething = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理 Providers</span></span><br><span class="line">    <span class="keyword">for</span> (i = providers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        removeDyingProviderLocked(<span class="keyword">null</span>, providers.get(i), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除APP申请的临时权限</span></span><br><span class="line">    <span class="comment">// Remove transient permissions granted from/to this package/user</span></span><br><span class="line">    removeUriPermissionsForPackageLocked(packageName, userId, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (doit) &#123;</span><br><span class="line">        <span class="comment">//  清理 Broadcast</span></span><br><span class="line">        <span class="keyword">for</span> (i = mBroadcastQueues.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            didSomething |= mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(</span><br><span class="line">                    packageName, <span class="keyword">null</span>, userId, doit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span> || uninstalling) &#123;</span><br><span class="line">        <span class="comment">// Remove pending intents.  For now we only do this when force</span></span><br><span class="line">        <span class="comment">// stopping users, because we have some problems when doing this</span></span><br><span class="line">        <span class="comment">// for packages -- app widgets are not currently cleaned up for</span></span><br><span class="line">        <span class="comment">// such packages, so they can be left with bad pending intents.</span></span><br><span class="line">        <span class="keyword">if</span> (mIntentSenderRecords.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Iterator&lt;WeakReference&lt;PendingIntentRecord&gt;&gt; it</span><br><span class="line">                    = mIntentSenderRecords.values().iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                WeakReference&lt;PendingIntentRecord&gt; wpir = it.next();</span><br><span class="line">                <span class="keyword">if</span> (wpir == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                PendingIntentRecord pir = wpir.get();</span><br><span class="line">                <span class="keyword">if</span> (pir == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Stopping user, remove all objects for the user.</span></span><br><span class="line">                    <span class="keyword">if</span> (pir.key.userId != userId) &#123;</span><br><span class="line">                        <span class="comment">// Not the same user, skip it.</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (UserHandle.getAppId(pir.uid) != appId) &#123;</span><br><span class="line">                        <span class="comment">// Different app id, skip it.</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (userId != UserHandle.USER_ALL &amp;&amp; pir.key.userId != userId) &#123;</span><br><span class="line">                        <span class="comment">// Different user, skip it.</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!pir.key.packageName.equals(packageName)) &#123;</span><br><span class="line">                        <span class="comment">// Different package, skip it.</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!doit) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                didSomething = <span class="keyword">true</span>;</span><br><span class="line">                it.remove();</span><br><span class="line">                makeIntentSenderCanceledLocked(pir);</span><br><span class="line">                <span class="keyword">if</span> (pir.key.activity != <span class="keyword">null</span> &amp;&amp; pir.key.activity.pendingResults != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pir.key.activity.pendingResults.remove(pir.ref);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (doit) &#123;</span><br><span class="line">        <span class="keyword">if</span> (purgeCache &amp;&amp; packageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AttributeCache ac = AttributeCache.instance();</span><br><span class="line">            <span class="keyword">if</span> (ac != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ac.removePackage(packageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mBooted) &#123;</span><br><span class="line">            <span class="comment">// 恢复 Activity栈</span></span><br><span class="line">            mStackSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">            mStackSupervisor.scheduleIdleLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> didSomething;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><h2 id="AMS-killPackageProcessesLocked"><a href="#AMS-killPackageProcessesLocked" class="headerlink" title="AMS.killPackageProcessesLocked"></a>AMS.killPackageProcessesLocked</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">killPackageProcessesLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    String packageName, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> appId,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> userId, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> minOomAdj, // <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INVALID_ADJ = <span class="number">-10000</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> callerWillRestart, // <span class="keyword">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> allowRestart,      // <span class="keyword">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> doit,              // <span class="keyword">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> evenPersistent,    // <span class="keyword">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">    String reason</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;ProcessRecord&gt; procs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove all processes this package may have touched: all with the</span></span><br><span class="line">    <span class="comment">// same UID (except for the system or root user), and all whose name</span></span><br><span class="line">    <span class="comment">// matches the package name.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> NP = mProcessNames.getMap().size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ip=<span class="number">0</span>; ip&lt;NP; ip++) &#123;</span><br><span class="line">        SparseArray&lt;ProcessRecord&gt; apps = mProcessNames.getMap().valueAt(ip);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> NA = apps.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ia=<span class="number">0</span>; ia&lt;NA; ia++) &#123;</span><br><span class="line">            ProcessRecord app = apps.valueAt(ia);</span><br><span class="line">            <span class="keyword">if</span> (app.persistent &amp;&amp; !evenPersistent) &#123;</span><br><span class="line">                <span class="comment">// we don't kill persistent processes</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (app.removed) &#123;</span><br><span class="line">                <span class="keyword">if</span> (doit) &#123;</span><br><span class="line">                    procs.add(app);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Skip process if it doesn't meet our oom adj requirement.</span></span><br><span class="line">            <span class="keyword">if</span> (app.setAdj &lt; minOomAdj) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If no package is specified, we call all processes under the</span></span><br><span class="line">            <span class="comment">// give user id.</span></span><br><span class="line">            <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (userId != UserHandle.USER_ALL &amp;&amp; app.userId != userId) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (appId &gt;= <span class="number">0</span> &amp;&amp; UserHandle.getAppId(app.uid) != appId) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// Package has been specified, we want to hit all processes</span></span><br><span class="line">            <span class="comment">// that match it.  We need to qualify this by the processes</span></span><br><span class="line">            <span class="comment">// that are running under the specified app and user ID.</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> isDep = app.pkgDeps != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; app.pkgDeps.contains(packageName);</span><br><span class="line">                <span class="keyword">if</span> (!isDep &amp;&amp; UserHandle.getAppId(app.uid) != appId) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (userId != UserHandle.USER_ALL &amp;&amp; app.userId != userId) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!app.pkgList.containsKey(packageName) &amp;&amp; !isDep) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process has passed all conditions, kill it!</span></span><br><span class="line">            <span class="keyword">if</span> (!doit) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            app.removed = <span class="keyword">true</span>;</span><br><span class="line">            procs.add(app);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = procs.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        removeProcessLocked(procs.get(i), callerWillRestart, allowRestart, reason);</span><br><span class="line">    &#125;</span><br><span class="line">    updateOomAdjLocked();</span><br><span class="line">    <span class="keyword">return</span> N &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="removeProcessLocked"><a href="#removeProcessLocked" class="headerlink" title="removeProcessLocked"></a>removeProcessLocked</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeProcessLocked</span><span class="params">(ProcessRecord app,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> callerWillRestart, <span class="keyword">boolean</span> allowRestart, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String name = app.processName;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = app.uid;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_PROCESSES) Slog.d(TAG_PROCESSES,</span><br><span class="line">        <span class="string">"Force removing proc "</span> + app.toShortString() + <span class="string">" ("</span> + name + <span class="string">"/"</span> + uid + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">    ProcessRecord old = mProcessNames.get(name, uid);</span><br><span class="line">    <span class="keyword">if</span> (old != app) &#123;</span><br><span class="line">        <span class="comment">// This process is no longer active, so nothing to do.</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Ignoring remove of inactive process: "</span> + app);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    removeProcessNameLocked(name, uid);</span><br><span class="line">    <span class="keyword">if</span> (mHeavyWeightProcess == app) &#123;</span><br><span class="line">        mHandler.sendMessage(mHandler.obtainMessage(CANCEL_HEAVY_NOTIFICATION_MSG,</span><br><span class="line">                mHeavyWeightProcess.userId, <span class="number">0</span>));</span><br><span class="line">        mHeavyWeightProcess = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> needRestart = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (app.pid &gt; <span class="number">0</span> &amp;&amp; app.pid != MY_PID) &#123;</span><br><span class="line">        <span class="keyword">int</span> pid = app.pid;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</span><br><span class="line">            mPidsSelfLocked.remove(pid);</span><br><span class="line">            mHandler.removeMessages(PROC_START_TIMEOUT_MSG, app);</span><br><span class="line">        &#125;</span><br><span class="line">        mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);</span><br><span class="line">        <span class="keyword">boolean</span> willRestart = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (app.persistent &amp;&amp; !app.isolated) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!callerWillRestart) &#123;</span><br><span class="line">                willRestart = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                needRestart = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 杀进程</span></span><br><span class="line">        app.kill(reason, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (app.isolated) &#123;</span><br><span class="line">            mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);</span><br><span class="line">            getPackageManagerInternalLocked().removeIsolatedUid(app.uid);</span><br><span class="line">        &#125;</span><br><span class="line">        handleAppDiedLocked(app, willRestart, allowRestart);</span><br><span class="line">        <span class="keyword">if</span> (willRestart) &#123;</span><br><span class="line">            removeLruProcessLocked(app);</span><br><span class="line">            addAppLocked(app.info, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">null</span> <span class="comment">/* ABI override */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mRemovedProcesses.add(app);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> needRestart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="finishForceStopPackageLocked"><a href="#finishForceStopPackageLocked" class="headerlink" title="finishForceStopPackageLocked"></a>finishForceStopPackageLocked</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishForceStopPackageLocked</span><span class="params">(<span class="keyword">final</span> String packageName, <span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PACKAGE_RESTARTED,</span><br><span class="line">            Uri.fromParts(<span class="string">"package"</span>, packageName, <span class="keyword">null</span>));</span><br><span class="line">    <span class="keyword">if</span> (!mProcessesReady) &#123;</span><br><span class="line">        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY</span><br><span class="line">                | Intent.FLAG_RECEIVER_FOREGROUND);</span><br><span class="line">    &#125;</span><br><span class="line">    intent.putExtra(Intent.EXTRA_UID, uid);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_USER_HANDLE, UserHandle.getUserId(uid));</span><br><span class="line">    broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, intent,</span><br><span class="line">            <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE,</span><br><span class="line">            <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, MY_PID, SYSTEM_UID, UserHandle.getUserId(uid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清理完与包名相关的进程后，会发送一个ACTION_PACKAGE_RESTARTED广播。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://gityuan.com/2014/01/04/get-service/" target="_blank" rel="noopener">http://gityuan.com/2014/01/04/get-service/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于AOSP 8.0.1源码分析force-stop的实现细节。&lt;/p&gt;
&lt;h1 id=&quot;使用-force-stop&quot;&gt;&lt;a href=&quot;#使用-force-stop&quot; class=&quot;headerlink&quot; title=&quot;使用 force-stop&quot;&gt;&lt;/a&gt;使用 forc
      
    
    </summary>
    
    
      <category term="android" scheme="https://www.forkliu.com/tags/android/"/>
    
      <category term="aosp" scheme="https://www.forkliu.com/tags/aosp/"/>
    
  </entry>
  
  <entry>
    <title>JVM:Garbage Collection</title>
    <link href="https://www.forkliu.com/2019/06/24/JVM-GC/"/>
    <id>https://www.forkliu.com/2019/06/24/JVM-GC/</id>
    <published>2019-06-24T06:39:26.000Z</published>
    <updated>2019-06-24T07:24:53.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introdution"><a href="#Introdution" class="headerlink" title="Introdution"></a>Introdution</h1><p>Garbage Collection需要完成的事情：</p><ul><li>哪些内存需要回收</li><li>什么时候回收</li><li>如何回收<br>Java GC关注的内存包括堆和方法区。</li></ul><h1 id="如何判断对象已经死亡"><a href="#如何判断对象已经死亡" class="headerlink" title="如何判断对象已经死亡"></a>如何判断对象已经死亡</h1><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h2 id="根搜索算法-GC-Roots"><a href="#根搜索算法-GC-Roots" class="headerlink" title="根搜索算法(GC Roots)"></a>根搜索算法(GC Roots)</h2><h2 id="方法区回收"><a href="#方法区回收" class="headerlink" title="方法区回收"></a>方法区回收</h2><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h2><h2 id="标记-复制"><a href="#标记-复制" class="headerlink" title="标记-复制"></a>标记-复制</h2><h2 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h2><h2 id="分代回收算法"><a href="#分代回收算法" class="headerlink" title="分代回收算法"></a>分代回收算法</h2><p>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introdution&quot;&gt;&lt;a href=&quot;#Introdution&quot; class=&quot;headerlink&quot; title=&quot;Introdution&quot;&gt;&lt;/a&gt;Introdution&lt;/h1&gt;&lt;p&gt;Garbage Collection需要完成的事情：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://www.forkliu.com/tags/jvm/"/>
    
      <category term="gc" scheme="https://www.forkliu.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Android ART:Image File Format</title>
    <link href="https://www.forkliu.com/2019/06/21/Android-ART-Image-File-Format/"/>
    <id>https://www.forkliu.com/2019/06/21/Android-ART-Image-File-Format/</id>
    <published>2019-06-21T11:52:41.000Z</published>
    <updated>2019-06-23T03:35:05.470Z</updated>
    
    <content type="html"><![CDATA[<p>备注：基于Android 8.1.0 分析。</p><h1 id="文件格式定义"><a href="#文件格式定义" class="headerlink" title="文件格式定义"></a>文件格式定义</h1><p>art/runtime/image.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> magic_[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">uint8_t</span> version_[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required base address for mapping the image.</span></span><br><span class="line"><span class="keyword">uint32_t</span> image_begin_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image size, not page aligned.</span></span><br><span class="line"><span class="keyword">uint32_t</span> image_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Checksum of the oat file we link to for load time sanity check.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_checksum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start address for oat file. Will be before oat_data_begin_ for .so files.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_file_begin_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required oat address expected by image Method::GetCode() pointers.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_data_begin_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// End of oat data address range for this image file.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_data_end_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// End of oat file address range. will be after oat_data_end_ for</span></span><br><span class="line"><span class="comment">// .so files. Used for positioning a following alloc spaces.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_file_end_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boot image begin and end (app image headers only).</span></span><br><span class="line"><span class="keyword">uint32_t</span> boot_image_begin_;</span><br><span class="line"><span class="keyword">uint32_t</span> boot_image_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boot oat begin and end (app image headers only).</span></span><br><span class="line"><span class="keyword">uint32_t</span> boot_oat_begin_;</span><br><span class="line"><span class="keyword">uint32_t</span> boot_oat_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> We should probably insert a boot image checksum for app images.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The total delta that this image has been patched.</span></span><br><span class="line"><span class="keyword">int32_t</span> patch_delta_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Absolute address of an Object[] of objects needed to reinitialize from an image.</span></span><br><span class="line"><span class="keyword">uint32_t</span> image_roots_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pointer size, this affects the size of the ArtMethods.</span></span><br><span class="line"><span class="keyword">uint32_t</span> pointer_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean (0 or 1) to denote if the image was compiled with --compile-pic option</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint32_t</span> compile_pic_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean (0 or 1) to denote if the image can be mapped at a random address, this only refers to</span></span><br><span class="line"><span class="comment">// the .art file. Currently, app oat files do not depend on their app image. There are no pointers</span></span><br><span class="line"><span class="comment">// from the app oat code to the app image.</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint32_t</span> is_pic_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image section sizes/offsets correspond to the uncompressed form.</span></span><br><span class="line">ImageSection sections_[kSectionCount];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image methods, may be inside of the boot image for app images.</span></span><br><span class="line"><span class="keyword">uint64_t</span> image_methods_[kImageMethodsCount];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Storage method for the image, the image may be compressed.</span></span><br><span class="line">StorageMode storage_mode_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data size for the image data excluding the bitmap and the header. For compressed images, this</span></span><br><span class="line"><span class="comment">// is the compressed size in the file.</span></span><br><span class="line"><span class="keyword">uint32_t</span> data_size_;</span><br></pre></td></tr></table></figure><p>以一个实际例子对每个字段进行说明</p><img src="/2019/06/21/Android-ART-Image-File-Format/boot-framwork-art-header.png" title="boot-framework.art文件头"><ul><li><p>magic_:0x61 0x72 0x74 0x0A</p></li><li><p>version_:0x30 0x34 0x36 0x00 版本号为046<br>art/runtime/image.cc</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> ImageHeader::kImageMagic[] = &#123; <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'\n'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> ImageHeader::kImageVersion[] = &#123; <span class="string">'0'</span>, <span class="string">'4'</span>, <span class="string">'6'</span>, <span class="string">'\0'</span> &#125;;  <span class="comment">// Hash-based methods array.</span></span><br></pre></td></tr></table></figure></li><li><p>image_begin_: image映射到内存的开始地址 </p></li><li><p>image_size_: image文件大小</p></li><li><p>oat_checksum_:0x41B78898</p></li><li><p>oat_file_begin_:0x70a5c000</p></li><li><p>oat_data_begin_:0x70a5d000</p></li><li><p>oat_data_end_:0x7126eef0</p></li><li><p>oat_file_end_:0x71273000</p></li><li><p>boot_image_begin_:0x00000000</p></li><li><p>boot_image_size_:0x00000000</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;备注：基于Android 8.1.0 分析。&lt;/p&gt;
&lt;h1 id=&quot;文件格式定义&quot;&gt;&lt;a href=&quot;#文件格式定义&quot; class=&quot;headerlink&quot; title=&quot;文件格式定义&quot;&gt;&lt;/a&gt;文件格式定义&lt;/h1&gt;&lt;p&gt;art/runtime/image.h&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="android" scheme="https://www.forkliu.com/tags/android/"/>
    
      <category term="art" scheme="https://www.forkliu.com/tags/art/"/>
    
  </entry>
  
  <entry>
    <title>JVM:内存区域和内存溢出异常</title>
    <link href="https://www.forkliu.com/2019/06/21/JVM-Memory-Area-and-OutOfMemoryError/"/>
    <id>https://www.forkliu.com/2019/06/21/JVM-Memory-Area-and-OutOfMemoryError/</id>
    <published>2019-06-21T06:36:03.000Z</published>
    <updated>2019-06-24T06:10:15.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行时内存区域"><a href="#运行时内存区域" class="headerlink" title="运行时内存区域"></a>运行时内存区域</h1><ul><li>Program Counter Register:程序计数器，线程私有，不会发生OOM的区域。当执行Java方法时，指向正在执行的虚拟机字节码指令的地址，当执行<br>Native方法时，它的值是undefined。</li><li>JVM Stacks: Java虚拟机栈。线程私有。存局部变量、对象引用和returnAdress(指向一条字节码指令的地址)。</li><li>Native Method Stack: 本地方法栈。Java虚拟机为执行本地方法提供的栈。</li><li>Java Heap: Java堆是垃圾收集器管理的主要区域。线程间共享。</li><li>Method Area: 线程共享区域。存已加载的类型信息、常量、静态变量和即时编译器编译后的代码等数据。</li><li>Runtime Constant Pool: 运行时常量池是方法区的一部分。存编译期生成的各种字面量和符号引用。</li><li>Direct Memory: 不是Java虚拟机运行时数据区的一部分。JDK1.4引入的NIO，使用Native函数库直接分配堆外内存。</li></ul><h1 id="对象访问"><a href="#对象访问" class="headerlink" title="对象访问"></a>对象访问</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><ul><li>Java VM Stack: “Object obj” 是一个reference类型数据，存放在Java栈的本地变量表中。</li><li>Java VM Heap: “new Object()” 是一个对象实例，存放在Java堆上。</li><li>Java Method Area: 对象的类型、父类、实现的接口和方法存在方法区。</li></ul><h1 id="实战：OOM"><a href="#实战：OOM" class="headerlink" title="实战：OOM"></a>实战：OOM</h1><h2 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h2><figure class="highlight java"><figcaption><span> Java Heap OOM Example</span><a href="/downloads/code/jvm/HeapOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError HeapOOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span></span>{</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>{</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      list.add(<span class="keyword">new</span> OOMObject());</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"> }</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HeapOOM.java</span><br></pre></td></tr></table></figure><p>运行参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError HeapOOM</span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid83007.hprof ...</span><br><span class="line">Heap dump file created [27583183 bytes in 0.102 secs]</span><br><span class="line">Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3210)</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3181)</span><br><span class="line">at java.util.ArrayList.grow(ArrayList.java:265)</span><br><span class="line">at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)</span><br><span class="line">at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)</span><br><span class="line">at java.util.ArrayList.add(ArrayList.java:462)</span><br><span class="line">at HeapOOM.main(HeapOOM.java:16)</span><br></pre></td></tr></table></figure><p>Android Studio 分析 hprof</p><img src="/2019/06/21/JVM-Memory-Area-and-OutOfMemoryError/jvm_heap_oom_hprof.png" title="Android Studio分析hprof"><h2 id="虚拟机栈溢出"><a href="#虚拟机栈溢出" class="headerlink" title="虚拟机栈溢出"></a>虚拟机栈溢出</h2><figure class="highlight java"><figcaption><span> Java VM Stack OOM Example</span><a href="/downloads/code/jvm/JavaVMStackSOF.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -Xss128k JavaVMStackSOF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span></span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> stackLength = -<span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span></span>{</span><br><span class="line">    stackLength++;</span><br><span class="line">    stackLeak();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF();</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">      oom.stackLeak();</span><br><span class="line">    }<span class="keyword">catch</span>(Throwable e){</span><br><span class="line">      System.out.println(<span class="string">"stack length:"</span> + oom.stackLength);</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">javac JavaVMStackSOF.java</span><br><span class="line">java -Xss160k JavaVMStackSOF</span><br><span class="line">stack length:770</span><br><span class="line">Exception in thread "main" java.lang.StackOverflowError</span><br><span class="line">at JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:9)</span><br><span class="line">at JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">at JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br></pre></td></tr></table></figure><h2 id="运行时常量池溢出"><a href="#运行时常量池溢出" class="headerlink" title="运行时常量池溢出"></a>运行时常量池溢出</h2><figure class="highlight java"><figcaption><span> Runtime Constant Pool OOM Example</span><a href="/downloads/code/jvm/RuntimeConstantPoolOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span></span>{</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      list.add(String.valueOf(i++).intern());</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0</span><br></pre></td></tr></table></figure><h2 id="方法区溢出"><a href="#方法区溢出" class="headerlink" title="方法区溢出"></a>方法区溢出</h2><figure class="highlight java"><figcaption><span> Method Area OOM Example</span><a href="/downloads/code/jvm/JavaMethodAreaOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javac -cp ".:./cglib-nodep-3.2.12.jar" JavaMethodAreaOOM.java</span></span><br><span class="line"><span class="comment"> * java -XX:PermSize=10M -XX:MaxPermSize=10M -cp ".:./cglib-nodep-3.2.12.jar" JavaMethodAreaOOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethodAreaOOM</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">      enhancer.setSuperclass(OOMObject.class);</span><br><span class="line">      enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">      enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor(){</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj,Method method,Object[] args,MethodProxy proxy)</span><span class="keyword">throws</span> Throwable</span>{</span><br><span class="line">          <span class="keyword">return</span> proxy.invokeSuper(obj,args);</span><br><span class="line">        }</span><br><span class="line">      });</span><br><span class="line">      enhancer.create();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>{</span><br><span class="line">  }</span><br><span class="line"> }</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0</span><br></pre></td></tr></table></figure><h2 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h2><figure class="highlight java"><figcaption><span> Direct Memory OOM Example</span><a href="/downloads/code/jvm/DirectMemoryOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -Xmx20m -XX:MaxDirectMemorySize=10M DirectMemoryOOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryOOM</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">    Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">    unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe = (Unsafe)unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      unsafe.allocateMemory(<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运行时内存区域&quot;&gt;&lt;a href=&quot;#运行时内存区域&quot; class=&quot;headerlink&quot; title=&quot;运行时内存区域&quot;&gt;&lt;/a&gt;运行时内存区域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Program Counter Register:程序计数器，线程私有，不会发生OOM的
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://www.forkliu.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Build source code viewer with opengrok based docker</title>
    <link href="https://www.forkliu.com/2019/06/17/Build-source-code-viewer-with-opengrok-based-docker/"/>
    <id>https://www.forkliu.com/2019/06/17/Build-source-code-viewer-with-opengrok-based-docker/</id>
    <published>2019-06-17T05:05:10.000Z</published>
    <updated>2019-06-17T06:04:26.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Install-images"><a href="#Install-images" class="headerlink" title="Install images"></a>Install images</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull opengrok/docker</span><br></pre></td></tr></table></figure><h1 id="Create-opengrok-directory"><a href="#Create-opengrok-directory" class="headerlink" title="Create opengrok directory"></a>Create opengrok directory</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir opengrok</span><br><span class="line">cd opengrok</span><br><span class="line">mkdir src</span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><ul><li>src:opengrok src root</li><li>data:opengrok index file</li></ul><h1 id="Start-docker"><a href="#Start-docker" class="headerlink" title="Start docker"></a>Start docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e REINDEX=0 -v ~/sourceview/src:/opengrok/src -v ~/sourceview/data:/opengrok/data -p 9090:8080 --name opengrok opengrok/docker:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> reindex</span><br><span class="line">docker exec &lt;container&gt; /scripts/index.sh</span><br><span class="line">docker exec opengrok /scripts/index.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> stop container</span><br><span class="line">docker stop opengrok</span><br><span class="line">docker start opengrok</span><br></pre></td></tr></table></figure><h1 id="You-can-get-inside-a-container-using-the-command-below"><a href="#You-can-get-inside-a-container-using-the-command-below" class="headerlink" title="You can get inside a container using the command below"></a>You can get inside a container using the command below</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container&gt; bash</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://hub.docker.com/r/opengrok/docker/" target="_blank" rel="noopener">https://hub.docker.com/r/opengrok/docker/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Install-images&quot;&gt;&lt;a href=&quot;#Install-images&quot; class=&quot;headerlink&quot; title=&quot;Install images&quot;&gt;&lt;/a&gt;Install images&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="opengrok" scheme="https://www.forkliu.com/tags/opengrok/"/>
    
      <category term="docker" scheme="https://www.forkliu.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Debug Android Framework with Android Studio</title>
    <link href="https://www.forkliu.com/2019/06/05/Debug-Android-Framework-with-Android-Studio/"/>
    <id>https://www.forkliu.com/2019/06/05/Debug-Android-Framework-with-Android-Studio/</id>
    <published>2019-06-05T01:53:06.000Z</published>
    <updated>2019-06-05T02:02:39.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在阅读Android Framework代码时，有时需要动态调试加深理解，或者想调试某个API的实现原理（如startActivity）时，希望可以使用Android Studio调试，且可以对应到源码的每一行，故需要搭建一个调试环境。</p><h1 id="可选方案"><a href="#可选方案" class="headerlink" title="可选方案"></a>可选方案</h1><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><p>下载并编译某个版本的源码，得到相应的image，加载进模拟器，然后将对应的源码导入到Android Studio。Android源码本身提供了一个工具，可以生成一个Android Studio工程。</p><h2 id="Google-真机"><a href="#Google-真机" class="headerlink" title="Google 真机"></a>Google 真机</h2><p>需要有一台Google系手机，查看该手机的版本去下载对应的源码，利用Android源码里的工具生成Android Studio工程文件，导入到Android Studio。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>上面两个方法网上有一些教程，本人没有试过，不知道是否真的可行。由于这两个方案有几个缺点，故而未使用。</p><ul><li>本人不喜欢使用模拟器作为开发和调试环境。</li><li>下载一份Android源码时间太久，至少需要100G的硬盘空间。</li><li>不能在Windows系统调试。</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>本节描述笔者使用的方法，该方法占用空间小、搭建时间短，可以在Windows系统上使用。本方法要求具备一台Google系手机，当然其他手机也可以，前提是该手机的框架层代码未被手机厂商修改过。</p><p>在Android Studio里如果想查看某个函数（如startActivity）的实现，可以右键跳转到源文件，前提是你下载了对应版本的源码。这里的源码是指android sdk某个版本号（如android-27）的源码。但是在调试的时候，报告源码不匹配，就是说与手机里那一份代码不一样，导致函数的行号对不上。<br>下面介绍制作一个android-27的源码包方法</p><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>查看手机的Build Number，在设置里查看。笔者手机的Build Number是OPM1.171019.016，然后在Google源码官网上比对对应的Branch Name，通过比较发现对应的Branch Name是android-8.1.0_r10。</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd android-sdk-source-code</span><br><span class="line">mkdir –p frameworks/base</span><br><span class="line">git clone --depth 1 https://android.googlesource.com/platform/frameworks/base -b android-8.1.0_r10 frameworks/base</span><br><span class="line">git clone --depth 1 https://android.googlesource.com/platform/libcore -b android-8.1.0_r10</span><br><span class="line">git clone --depth 1 https://android.googlesource.com/platform/development -b android-8.1.0_r10</span><br></pre></td></tr></table></figure><h2 id="创建source-properties"><a href="#创建source-properties" class="headerlink" title="创建source.properties"></a>创建source.properties</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "Pkg.UserSrc=false\nPkg.Revision=1\nAndroidVersion.ApiLevel=27" &gt; source.properties</span><br></pre></td></tr></table></figure><h2 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat development/build/tools/mk_sources_zip.py | sed -e 's/TOP_FOLDER = .*/TOP_FOLDER = "android-27"/' &gt; my_mk_sources_zip.py</span><br></pre></td></tr></table></figure><h2 id="打包源码android-27-sources-zip"><a href="#打包源码android-27-sources-zip" class="headerlink" title="打包源码android-27-sources.zip"></a>打包源码android-27-sources.zip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python my_mk_sources_zip.py -z source.properties android-27-sources.zip</span><br></pre></td></tr></table></figure><h2 id="替换android-sdk并重启Android-Studio"><a href="#替换android-sdk并重启Android-Studio" class="headerlink" title="替换android-sdk并重启Android Studio"></a>替换android-sdk并重启Android Studio</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip android-27-sources.zip -d $&#123;ANDROID_HOME&#125;/sources</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在阅读Android Framework代码时，有时需要动态调试加深理解，或者想调试某个API的实现原理（如startActivity）时，
      
    
    </summary>
    
    
      <category term="android develop" scheme="https://www.forkliu.com/tags/android-develop/"/>
    
  </entry>
  
  <entry>
    <title>Android 源码分析:startService</title>
    <link href="https://www.forkliu.com/2019/06/02/Android-Source-Code-Read-startService/"/>
    <id>https://www.forkliu.com/2019/06/02/Android-Source-Code-Read-startService/</id>
    <published>2019-06-02T02:15:33.000Z</published>
    <updated>2019-06-03T08:40:04.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote><p>W ActivityManager: Background start not allowed: service Intent</p></blockquote><h1 id="Source-Files"><a href="#Source-Files" class="headerlink" title="Source Files"></a>Source Files</h1><ul><li><a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ContextImpl.java" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ContextImpl.java</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ActivityManager.java#getService" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ActivityManager.java#getService</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</a></li></ul><h1 id="Client-gt-AMS"><a href="#Client-gt-AMS" class="headerlink" title="Client =&gt; AMS"></a>Client =&gt; AMS</h1><h2 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContextImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">false</span>, mUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startForegroundService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">true</span>, mUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="startServiceCommon"><a href="#startServiceCommon" class="headerlink" title="startServiceCommon"></a>startServiceCommon</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ComponentName <span class="title">startServiceCommon</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Intent service, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> requireForeground,</span></span></span><br><span class="line"><span class="function"><span class="params">    UserHandle user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ComponentName cn = ActivityManager.getService().startService(</span><br><span class="line">        mMainThread.getApplicationThread(),</span><br><span class="line">        service,</span><br><span class="line">        service.resolveTypeIfNeeded(getContentResolver()),</span><br><span class="line">        requireForeground,</span><br><span class="line">        getOpPackageName(),</span><br><span class="line">        user.getIdentifier()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getService"><a href="#getService" class="headerlink" title="getService"></a>getService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ActivityManager</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">    <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">            <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</span><br><span class="line">            <span class="keyword">return</span> am;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h1><h2 id="startService-1"><a href="#startService-1" class="headerlink" title="startService"></a>startService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    IApplicationThread caller, </span></span></span><br><span class="line"><span class="function"><span class="params">    Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params">    String resolvedType, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> requireForeground, </span></span></span><br><span class="line"><span class="function"><span class="params">    String callingPackage, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">    ComponentName res;</span><br><span class="line">    res = mServices.startServiceLocked(caller, </span><br><span class="line">        service,</span><br><span class="line">        resolvedType, </span><br><span class="line">        callingPid, </span><br><span class="line">        callingUid,</span><br><span class="line">        requireForeground, </span><br><span class="line">        callingPackage, </span><br><span class="line">        userId);                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityManager.getService().broadcastIntent(<br>                    mMainThread.getApplicationThread(), // caller<br>                    intent,                             // intent<br>                    resolvedType,                       // resolvedType<br>                    null,                               // resultTo<br>                    Activity.RESULT_OK,                 // resultCode<br>                    null,                               // resultData<br>                    null,                               // map<br>                    null,                               // requiredPermissions<br>                    AppOpsManager.OP_NONE,              // appOp<br>                    null,                               // options<br>                    false,                              // serialized<br>                    false,                              // stick<br>                    getUserId()<br>                    );</p><p>_data.writeInterfaceToken(“android.app.IActivityManager”);<br>          _data.writeStrongBinder((caller != null) ? caller.asBinder() : null);<br>          if (intent != null) {<br>            _data.writeInt(1);<br>            intent.writeToParcel(_data, 0);<br>          } else {</p><pre><code>  _data.writeInt(0);} _data.writeString(resolvedType);_data.writeStrongBinder((resultTo != null) ? resultTo.asBinder() : null);_data.writeInt(resultCode);_data.writeString(resultData);if (map != null) {  _data.writeInt(1);  map.writeToParcel(_data, 0);} else {  _data.writeInt(0);} _data.writeStringArray(requiredPermissions);_data.writeInt(appOp);if (options != null) {  _data.writeInt(1);  options.writeToParcel(_data, 0);} else {  _data.writeInt(0);} _data.writeInt(serialized ? 1 : 0);_data.writeInt(sticky ? 1 : 0);_data.writeInt(userId);</code></pre><h1 id="AMS-gt-Client"><a href="#AMS-gt-Client" class="headerlink" title="AMS =&gt; Client"></a>AMS =&gt; Client</h1><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;W ActivityManager: Background start n
      
    
    </summary>
    
    
      <category term="android source code" scheme="https://www.forkliu.com/tags/android-source-code/"/>
    
  </entry>
  
  <entry>
    <title>C++ Virtual Inherit</title>
    <link href="https://www.forkliu.com/2019/05/31/C-Virtual-Inherit/"/>
    <id>https://www.forkliu.com/2019/05/31/C-Virtual-Inherit/</id>
    <published>2019-05-31T06:13:47.000Z</published>
    <updated>2019-05-31T10:31:05.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单类的虚拟继承"><a href="#简单类的虚拟继承" class="headerlink" title="简单类的虚拟继承"></a>简单类的虚拟继承</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit Simple Example</span><a href="/downloads/code/multi-inherit-virtual-simple/jni/virtual_multi_inherit_simple.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">     ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">     ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">     ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><img src="/2019/05/31/C-Virtual-Inherit/class_memory_layout_vi_simple.png" title="virtual inherit without virtual function"><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="类C的构造函数"><a href="#类C的构造函数" class="headerlink" title="类C的构造函数"></a>类C的构造函数</h3><img src="/2019/05/31/C-Virtual-Inherit/class_c_constructor.png" title="class C constructor"><h3 id="类D的构造函数"><a href="#类D的构造函数" class="headerlink" title="类D的构造函数"></a>类D的构造函数</h3><img src="/2019/05/31/C-Virtual-Inherit/class_d_constructor.png" title="class D constructor"><h1 id="带虚函数的虚拟继承"><a href="#带虚函数的虚拟继承" class="headerlink" title="带虚函数的虚拟继承"></a>带虚函数的虚拟继承</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit VTable Example</span><a href="/downloads/code/multi-inherit-virtual-vtbl/jni/virtual_multi_inherit_vtbl.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="内存布局-1"><a href="#内存布局-1" class="headerlink" title="内存布局"></a>内存布局</h2><img src="/2019/05/31/C-Virtual-Inherit/class_memory_layout_vi_vtbl.png" title="virtual inherit with virtual function"><h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="类B的虚函数表"><a href="#类B的虚函数表" class="headerlink" title="类B的虚函数表"></a>类B的虚函数表</h3><img src="/2019/05/31/C-Virtual-Inherit/vtable_b.png" title="class B virtual method table"><p>0x8 : offset vbase<br>0x0 : offset to this<br>0x0 : typeinfo</p><h3 id="类B的构造函数"><a href="#类B的构造函数" class="headerlink" title="类B的构造函数"></a>类B的构造函数</h3><img src="/2019/05/31/C-Virtual-Inherit/class_b_constructor_vtable.png" title="class B constructor"><p>+0xC 是类B的虚函数表地址<br>+0x34 也是类B的虚函数表地址  用于覆盖base class的vptr</p><h3 id="VTT-Virtual-Table-Table"><a href="#VTT-Virtual-Table-Table" class="headerlink" title="VTT(Virtual Table Table)"></a>VTT(Virtual Table Table)</h3><img src="/2019/05/31/C-Virtual-Inherit/vtt_d.png" title="class D VTT"><h3 id="Class-D-virtual-method-table"><a href="#Class-D-virtual-method-table" class="headerlink" title="Class D virtual method table"></a>Class D virtual method table</h3><img src="/2019/05/31/C-Virtual-Inherit/vtable_d.png" title="class D vtable"><h3 id="Class-D-constructor"><a href="#Class-D-constructor" class="headerlink" title="Class D constructor"></a>Class D constructor</h3><img src="/2019/05/31/C-Virtual-Inherit/class_d_constructor_vtable.png" title="class D constructor"><p>执行步骤</p><ul><li>执行 A的构造函数  this + 0x14  offset to object d</li><li>执行 B的构造函数  this + 0x00  注意这个B的构造函数 是隐式生成的，在这里面不会执行A的构造函数</li><li>执行 C的构造函数  this + 0x08  </li><li>覆盖 B的vptr   [this+0x00] = vtbl_d + 0x0c    0x5c98  可对比class D的虚函数表</li><li>覆盖 A的vptr   [this+0x14] = vtbl_d + 0x50    0x5cdc</li><li>覆盖 C的vptr   [this+0x08] = vtbl_d + 0x2c    0x5cb8</li></ul><h3 id="Class-B-constructor-隐式"><a href="#Class-B-constructor-隐式" class="headerlink" title="Class B constructor(隐式)"></a>Class B constructor(隐式)</h3><img src="/2019/05/31/C-Virtual-Inherit/class_b_constructor_vtt.png" title="class B constructor for VTT"><p>执行步骤</p><ul><li>vptr = construction for vtable B-in-D + 0x0C</li><li>vbase ptr 计算：vptr - 0xC 的位置存放了this指针与虚基类的偏移量(vbase offset to this) value=0x14</li><li>vbase vptr = construction for vtable B-in-D + 0x34</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://xr1s.me/2018/03/13/the-way-to-dynamic-dispatch-vtable/" target="_blank" rel="noopener">https://xr1s.me/2018/03/13/the-way-to-dynamic-dispatch-vtable/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单类的虚拟继承&quot;&gt;&lt;a href=&quot;#简单类的虚拟继承&quot; class=&quot;headerlink&quot; title=&quot;简单类的虚拟继承&quot;&gt;&lt;/a&gt;简单类的虚拟继承&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="c++" scheme="https://www.forkliu.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++ Virtual Method Table</title>
    <link href="https://www.forkliu.com/2019/05/31/C-Virtual-Method-Table/"/>
    <id>https://www.forkliu.com/2019/05/31/C-Virtual-Method-Table/</id>
    <published>2019-05-31T02:16:42.000Z</published>
    <updated>2019-05-31T06:38:20.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文的代码使用android-ndk编译，在armeabi-v7a下研究，基于IDA Pro得出结论。</p><h1 id="简单类继承"><a href="#简单类继承" class="headerlink" title="简单类继承"></a>简单类继承</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit Simple Example</span><a href="/downloads/code/multi-inherit-normal-simple/jni/normal_multi_inherit_simple.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">     ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">     ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">     ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="在IDA中的内存布局"><a href="#在IDA中的内存布局" class="headerlink" title="在IDA中的内存布局"></a>在IDA中的内存布局</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class d memory layout</span><br><span class="line">---------------------</span><br><span class="line">+ 0x00 baseclass_B</span><br><span class="line">+ 0x00    baseclass_A</span><br><span class="line">+ 0x00        m_a</span><br><span class="line">+ 0x04    m_b</span><br><span class="line">+ 0x08 baseclass_C</span><br><span class="line">+ 0x08    baseclass_A</span><br><span class="line">+ 0x08        m_a</span><br><span class="line">+ 0x0C    m_c</span><br><span class="line">+ 0x10 m_d</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure><img src="/2019/05/31/C-Virtual-Method-Table/class_memory_layout_normal_simple.png" title="简单类的内存布局"><h1 id="带有虚函数的类继承"><a href="#带有虚函数的类继承" class="headerlink" title="带有虚函数的类继承"></a>带有虚函数的类继承</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit Simple Example</span><a href="/downloads/code/multi-inherit-normal-vtbl/jni/normal_multi_inherit_vtbl.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><img src="/2019/05/31/C-Virtual-Method-Table/class_memory_layout_normal_vtbl.png" title="带有虚函数的内存布局"><h2 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h2><img src="/2019/05/31/C-Virtual-Method-Table/virtual_method_table.png" title="virtual method table"><p>从上图看，类A,B,C的虚函数表布局很好理解，子类如果override了父类的虚函数，那么子类的虚函数表里的函数地址就是子类实现的函数。我们只关注<br>类D的虚函数表布局。<br>两个问题：</p><h3 id="为什么有两个析构函数"><a href="#为什么有两个析构函数" class="headerlink" title="为什么有两个析构函数"></a>为什么有两个析构函数</h3><p>对析构函数函数命名的说明</p><blockquote><p>D2 is the “base object destructor”. It destroys the object itself, as well as data members and non-virtual base classes.<br>D1 is the “complete object destructor”. It additionally destroys virtual base classes.<br>D0 is the “deleting object destructor”. It does everything the complete object destructor does, plus it calls operator delete to actually free the memory.</p></blockquote><p>虚析构函数都是成对出现的</p><blockquote><p>The entries for virtual destructors are actually pairs of entries. The first destructor, called the complete object destructor, performs the destruction without calling delete() on the object. The second destructor, called the deleting destructor, calls delete() after destroying the object. </p></blockquote><p>以类D为例说明两个析构函数的差别</p><ul><li><p>_ZN1DD2Ev:栈上的对象析构函的时候调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    D d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>_ZN1DD0Ev:堆上的对象析构函的时候调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    D* d = <span class="keyword">new</span> D(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">delete</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="non-virtual-thunk是什么"><a href="#non-virtual-thunk是什么" class="headerlink" title="non-virtual-thunk是什么"></a>non-virtual-thunk是什么</h3><img src="/2019/05/31/C-Virtual-Method-Table/d_non_virtual_thunk.png" title="class D non-virtual thunk method"><p>在多继承中用于调整this的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    C* d = <span class="keyword">new</span> D(<span class="number">0</span>);   <span class="comment">// d 指向了D object + 0xC的位置，</span></span><br><span class="line">    <span class="keyword">delete</span> d;          <span class="comment">// 执行析构函数的时候利用non-virtual thunk调整回去 -0xC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="类A的构造函数"><a href="#类A的构造函数" class="headerlink" title="类A的构造函数"></a>类A的构造函数</h3><img src="/2019/05/31/C-Virtual-Method-Table/a_constructor.png" title="class A constructor method"><p>类A内存布局的第1个4字节存放的是虚函数表指针。</p><h3 id="类B的构造函数"><a href="#类B的构造函数" class="headerlink" title="类B的构造函数"></a>类B的构造函数</h3><img src="/2019/05/31/C-Virtual-Method-Table/b_constructor.png" title="class B constructor method"><ul><li><p>先执行父类的构造函数</p></li><li><p>赋值虚函数表指针,覆盖了父类构造函数设置的虚函数表指针</p></li><li><p>初始化m_b</p><p>类C的构造函数与类B相同。</p></li></ul><h3 id="类D的构造函数"><a href="#类D的构造函数" class="headerlink" title="类D的构造函数"></a>类D的构造函数</h3><img src="/2019/05/31/C-Virtual-Method-Table/d_constructor.png" title="class D constructor method"><ul><li>依次执行B、C的构造函数</li><li>C构造函数的this + 0xC   可以对照D的内存布局</li><li>D类有两个虚函数表指针：vtbl+8,vtbl+0x24</li><li>初始化m_d</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;本文的代码使用android-ndk编译，在armeabi-v7a下研究，基于IDA Pro得出结论。&lt;/p&gt;
&lt;h1 id=&quot;简单类继承&quot;
      
    
    </summary>
    
    
      <category term="c++" scheme="https://www.forkliu.com/tags/c/"/>
    
      <category term="virtual method" scheme="https://www.forkliu.com/tags/virtual-method/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 使用指南</title>
    <link href="https://www.forkliu.com/2019/05/31/Markdown-User-Guide/"/>
    <id>https://www.forkliu.com/2019/05/31/Markdown-User-Guide/</id>
    <published>2019-05-31T02:15:19.000Z</published>
    <updated>2019-05-31T03:05:16.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><p>直接嵌入代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   print(<span class="string">"Hello,Python!"</span>)</span><br></pre></td></tr></table></figure></li><li><p>嵌入文件中的代码</p><figure class="highlight cpp"><figcaption><span> Hello World in C++</span><a href="/downloads/code/hello_world.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello,C++"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><img src="/2019/05/31/Markdown-User-Guide/class_memory_layout_normal_vtbl.png" title="带有虚函数的内存布局"><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接嵌入代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="markdown" scheme="https://www.forkliu.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-0050-pow</title>
    <link href="https://www.forkliu.com/2019/05/29/LeetCode-0050-pow/"/>
    <id>https://www.forkliu.com/2019/05/29/LeetCode-0050-pow/</id>
    <published>2019-05-29T07:06:06.000Z</published>
    <updated>2019-05-29T07:07:45.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><a href="https://leetcode.com/problems/powx-n/" target="_blank" rel="noopener">https://leetcode.com/problems/powx-n/</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> half <span class="keyword">float64</span> = myPow(x,n/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> half * half</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> half * half * x</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> half * half / x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/powx-n/&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://www.forkliu.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Android 安装源码分析</title>
    <link href="https://www.forkliu.com/2019/05/29/Android-PM/"/>
    <id>https://www.forkliu.com/2019/05/29/Android-PM/</id>
    <published>2019-05-29T02:11:32.000Z</published>
    <updated>2019-05-29T04:46:35.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h1><p><a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/system/core/adb/commandline.cpp#send_shell_command" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/adb/commandline.cpp#send_shell_command</a><br><a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/content/pm/PackageManager.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/content/pm/PackageManager.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/org/apache/harmony/security/utils/JarUtils.java#68" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/org/apache/harmony/security/utils/JarUtils.java#68</a></p><h1 id="SignatureSpi"><a href="#SignatureSpi" class="headerlink" title="SignatureSpi"></a>SignatureSpi</h1><p><a href="http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/DigestSignatureSpi.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/DigestSignatureSpi.java</a><br><a href="http://androidxref.com/9.0.0_r3/xref/external/conscrypt/common/src/main/java/org/conscrypt/OpenSSLSignature.java" target="_blank" rel="noopener">http://androidxref.com/9.0.0_r3/xref/external/conscrypt/common/src/main/java/org/conscrypt/OpenSSLSignature.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/external/conscrypt/src/main/java/org/conscrypt/OpenSSLSignatureRawRSA.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/external/conscrypt/src/main/java/org/conscrypt/OpenSSLSignatureRawRSA.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// collectCertificates</span></span><br><span class="line">    <span class="comment">// collectManifestDigest</span></span><br><span class="line">    pp.collectCertificates(pkg, parseFlags);</span><br><span class="line">    pp.collectManifestDigest(pkg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call Stack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.security.Signature.verify(&lt;Xposed&gt;:-1)</span><br><span class="line">org.apache.harmony.security.utils.JarUtils.verifySignature(JarUtils.java:224)</span><br><span class="line">at java.util.jar.JarVerifier.verifyCertificate(JarVerifier.java:294)</span><br><span class="line">at java.util.jar.JarVerifier.readCertificates(JarVerifier.java:268)</span><br><span class="line">at java.util.jar.StrictJarFile.&lt;init&gt;(StrictJarFile.java:75)</span><br><span class="line">at android.content.pm.PackageParser.collectCertificates(PackageParser.java:1073)</span><br><span class="line">at android.content.pm.PackageParser.collectCertificates(PackageParser.java:1058)</span><br><span class="line">at com.android.server.pm.PackageManagerService.installPackageLI(PackageManagerService.java:12508)</span><br><span class="line">at com.android.server.pm.PackageManagerService.-wrap25(PackageManagerService.java:-1)</span><br><span class="line">at com.android.server.pm.PackageManagerService$9.run(PackageManagerService.java:10410)</span><br><span class="line">at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">at android.os.Looper.loop(Looper.java:148)</span><br><span class="line">at android.os.HandlerThread.run(HandlerThread.java:61)</span><br><span class="line">at com.android.server.ServiceThread.run(ServiceThread.java:46)</span><br></pre></td></tr></table></figure><h1 id="核心破解"><a href="#核心破解" class="headerlink" title="核心破解"></a>核心破解</h1><p>com.android.org.conscrypt.OpenSSLSignature.engineVerify</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://androidxref.com/6.0.1_r10/xref/frameworks/base
      
    
    </summary>
    
    
      <category term="android security" scheme="https://www.forkliu.com/tags/android-security/"/>
    
  </entry>
  
  <entry>
    <title>c++ 继承</title>
    <link href="https://www.forkliu.com/2019/05/27/c-inherit/"/>
    <id>https://www.forkliu.com/2019/05/27/c-inherit/</id>
    <published>2019-05-27T01:46:12.000Z</published>
    <updated>2019-05-31T07:42:20.920Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">export NDK_ROOT=~/android-ndk-r18b</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang</span><br><span class="line">  --target=x86_64-none-linux-android</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/x86_64-4.9/prebuilt/linux-x86_64</span><br><span class="line">  --sysroot=$&#123;NDK_ROOT&#125;/sysroot</span><br><span class="line">  -isystem $&#123;NDK_ROOT&#125;/sysroot/usr/include/x86_64-linux-android</span><br><span class="line">  -pie -o  hello.c.o -c hello.c</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang</span><br><span class="line">  --target=x86_64-none-linux-android</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/x86_64-4.9/prebuilt/linux-x86_64</span><br><span class="line">  --sysroot  $&#123;NDK_ROOT&#125;/platforms/android-21/arch-x86_64</span><br><span class="line">  -pie hello.c.o -o hello</span><br><span class="line"></span><br><span class="line"><span class="meta">  $</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang \</span><br><span class="line">  --target=armv7-none-linux-androideabi \</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/arm-linux-androideabi-4.9 \</span><br><span class="line">  --sysroot=$&#123;NDK_ROOT&#125;/sysroot \</span><br><span class="line">  -isystem $&#123;NDK_ROOT&#125;/sysroot/usr/include/arm-linux-androideabi \</span><br><span class="line">  -pie \</span><br><span class="line">  -o  hello.c.o -c hello.c</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang</span><br><span class="line">  --target=armv7-none-linux-androideabi</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/arm-linux-androideabi-4.9/...</span><br><span class="line">  --sysroot  $&#123;NDK_ROOT&#125;/platforms/android-21/arch-arm</span><br><span class="line">  -pie hello.c.o -o hello</span><br></pre></td></tr></table></figure><h1 id="简单多继承"><a href="#简单多继承" class="headerlink" title="简单多继承"></a>简单多继承</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>clang -cc1 -emit-llvm -fdump-record-layouts -stdlib=libc++ normal_multi_inherit_simple.cpp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class A</span><br><span class="line">         0 |   int m_a</span><br><span class="line">           | [sizeof=4, dsize=4, align=4,</span><br><span class="line">           |  nvsize=4, nvalign=4]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class B</span><br><span class="line">         0 |   class A (base)</span><br><span class="line">         0 |     int m_a</span><br><span class="line">         4 |   int m_b</span><br><span class="line">           | [sizeof=8, dsize=8, align=4,</span><br><span class="line">           |  nvsize=8, nvalign=4]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class C</span><br><span class="line">         0 |   class A (base)</span><br><span class="line">         0 |     int m_a</span><br><span class="line">         4 |   int m_c</span><br><span class="line">           | [sizeof=8, dsize=8, align=4,</span><br><span class="line">           |  nvsize=8, nvalign=4]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class D</span><br><span class="line">         0 |   class B (base)</span><br><span class="line">         0 |     class A (base)</span><br><span class="line">         0 |       int m_a</span><br><span class="line">         4 |     int m_b</span><br><span class="line">         8 |   class C (base)</span><br><span class="line">         8 |     class A (base)</span><br><span class="line">         8 |       int m_a</span><br><span class="line">        12 |     int m_c</span><br><span class="line">        16 |   int m_d</span><br><span class="line">           | [sizeof=20, dsize=20, align=4,</span><br><span class="line">           |  nvsize=20, nvalign=4]</span><br></pre></td></tr></table></figure><h1 id="带虚函数的多继承"><a href="#带虚函数的多继承" class="headerlink" title="带虚函数的多继承"></a>带虚函数的多继承</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class A</span><br><span class="line">         0 |   (A vtable pointer)</span><br><span class="line">         8 |   int m_a</span><br><span class="line">           | [sizeof=16, dsize=12, align=8,</span><br><span class="line">           |  nvsize=12, nvalign=8]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class B</span><br><span class="line">         0 |   class A (primary base)</span><br><span class="line">         0 |     (A vtable pointer)</span><br><span class="line">         8 |     int m_a</span><br><span class="line">        12 |   int m_b</span><br><span class="line">           | [sizeof=16, dsize=16, align=8,</span><br><span class="line">           |  nvsize=16, nvalign=8]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class C</span><br><span class="line">         0 |   class A (primary base)</span><br><span class="line">         0 |     (A vtable pointer)</span><br><span class="line">         8 |     int m_a</span><br><span class="line">        12 |   int m_c</span><br><span class="line">           | [sizeof=16, dsize=16, align=8,</span><br><span class="line">           |  nvsize=16, nvalign=8]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class D</span><br><span class="line">         0 |   class B (primary base)</span><br><span class="line">         0 |     class A (primary base)</span><br><span class="line">         0 |       (A vtable pointer)</span><br><span class="line">         8 |       int m_a</span><br><span class="line">        12 |     int m_b</span><br><span class="line">        16 |   class C (base)</span><br><span class="line">        16 |     class A (primary base)</span><br><span class="line">        16 |       (A vtable pointer)</span><br><span class="line">        24 |       int m_a</span><br><span class="line">        28 |     int m_c</span><br><span class="line">        32 |   int m_d</span><br><span class="line">           | [sizeof=40, dsize=36, align=8,</span><br><span class="line">           |  nvsize=36, nvalign=8]</span><br></pre></td></tr></table></figure><h1 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h1><p>共享虚基类,典型的例子iostream</p><p>clang 输出内存布局</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clang -cc1 -fdump-record-layouts -stdlib=libc++ vinherit.cpp</span><br><span class="line">clang -cc1 -emit-llvm -fdump-record-layouts -stdlib=libc++ normal_multi_inherit.cpp</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(d) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 12</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clang++ -cc1 -emit-llvm -fdump-record-layouts -stdlib=libc++ normal_multi_inherit_simple.cpp</p><p>_ZTV is a prefix for vtable,<br>_ZTS is a prefix for type-string (name)<br>_ZTI is for type-info.</p><p>VTT<br>virtual thunk to<br>no-virtual thunk to</p><p>typeinfo<br>vtable pointer = vtable + 0x10 (64bit)</p><h1 id="imp-cxa-pure-virtual"><a href="#imp-cxa-pure-virtual" class="headerlink" title="imp_cxa_pure_virtual"></a><strong>imp_</strong>cxa_pure_virtual</h1><h1 id="destructor"><a href="#destructor" class="headerlink" title="destructor"></a>destructor</h1><p>D2 is the “base object destructor”. It destroys the object itself, as well as data members and non-virtual base classes.<br>D1 is the “complete object destructor”. It additionally destroys virtual base classes.<br>D0 is the “deleting object destructor”. It does everything the complete object destructor does, plus it calls operator delete to actually free the memory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="c++" scheme="https://www.forkliu.com/tags/c/"/>
    
      <category term="arm" scheme="https://www.forkliu.com/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>android unicode 字符串</title>
    <link href="https://www.forkliu.com/2019/05/24/android-unicode-string/"/>
    <id>https://www.forkliu.com/2019/05/24/android-unicode-string/</id>
    <published>2019-05-24T05:05:38.000Z</published>
    <updated>2019-05-24T05:17:44.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h1><ul><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/Unicode.h" target="_blank" rel="noopener">Unicode.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/Unicode.cpp" target="_blank" rel="noopener">Unicode.cpp</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/String8.h" target="_blank" rel="noopener">String8.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/String8.cpp" target="_blank" rel="noopener">String8.cpp</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/String16.h" target="_blank" rel="noopener">String16.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/String16.cpp" target="_blank" rel="noopener">String16.cpp</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/SharedBuffer.h" target="_blank" rel="noopener">SharedBuffer.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/SharedBuffer.cpp" target="_blank" rel="noopener">SharedBuffer.cpp</a></li></ul><h1 id="String16"><a href="#String16" class="headerlink" title="String16"></a>String16</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/system/core/libutils/String16.cpp#allocFromUTF8</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> char16_t* <span class="title">allocFromUTF8</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* u8str, <span class="keyword">size_t</span> u8len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">ssize_t</span> u16len = utf8_to_utf16_length(u8cur, u8len);</span><br><span class="line">    utf8_to_utf16(u8cur, u8len, u16str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! This is a string holding UTF-16 characters.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String16</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char16_t</span>*     mString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://androidxref.com/6.0.1_r10/xref/system/co
      
    
    </summary>
    
    
      <category term="android" scheme="https://www.forkliu.com/tags/android/"/>
    
      <category term="unicode" scheme="https://www.forkliu.com/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>android 智能指针</title>
    <link href="https://www.forkliu.com/2019/05/24/android-smart-pointer/"/>
    <id>https://www.forkliu.com/2019/05/24/android-smart-pointer/</id>
    <published>2019-05-24T04:55:08.000Z</published>
    <updated>2019-05-27T01:37:45.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h1><p><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/StrongPointer.h" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/StrongPointer.h</a><br><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/RefBase.h" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/RefBase.h</a><br><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/RefBase.cpp" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/libutils/RefBase.cpp</a></p><h1 id="StrongPointer"><a href="#StrongPointer" class="headerlink" title="StrongPointer"></a>StrongPointer</h1><h1 id="INITIAL-STRONG-VALUE-为什么不是0"><a href="#INITIAL-STRONG-VALUE-为什么不是0" class="headerlink" title="INITIAL_STRONG_VALUE 为什么不是0"></a>INITIAL_STRONG_VALUE 为什么不是0</h1><p>区分从来没有指针引用该对象，还是没有指针引用该对象<br>如果从来没有调用过，那么mStrong为INITIAL_STRONG_VALUE<br>如果没有指针引用该对象，mStrong = 0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://androidxref.com/6.0.1_r10/xref/system/core/inc
      
    
    </summary>
    
    
      <category term="android" scheme="https://www.forkliu.com/tags/android/"/>
    
      <category term="smart pointer" scheme="https://www.forkliu.com/tags/smart-pointer/"/>
    
  </entry>
  
</feed>
