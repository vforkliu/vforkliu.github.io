<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vforkliu</title>
  
  <subtitle>Personal Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vforkliu.github.io/"/>
  <updated>2019-06-24T07:24:53.534Z</updated>
  <id>https://vforkliu.github.io/</id>
  
  <author>
    <name>LIU JUN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM:Garbage Collection</title>
    <link href="https://vforkliu.github.io/2019/06/24/JVM-GC/"/>
    <id>https://vforkliu.github.io/2019/06/24/JVM-GC/</id>
    <published>2019-06-24T06:39:26.000Z</published>
    <updated>2019-06-24T07:24:53.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introdution"><a href="#Introdution" class="headerlink" title="Introdution"></a>Introdution</h1><p>Garbage Collection需要完成的事情：</p><ul><li>哪些内存需要回收</li><li>什么时候回收</li><li>如何回收<br>Java GC关注的内存包括堆和方法区。</li></ul><h1 id="如何判断对象已经死亡"><a href="#如何判断对象已经死亡" class="headerlink" title="如何判断对象已经死亡"></a>如何判断对象已经死亡</h1><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h2 id="根搜索算法-GC-Roots"><a href="#根搜索算法-GC-Roots" class="headerlink" title="根搜索算法(GC Roots)"></a>根搜索算法(GC Roots)</h2><h2 id="方法区回收"><a href="#方法区回收" class="headerlink" title="方法区回收"></a>方法区回收</h2><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h2><h2 id="标记-复制"><a href="#标记-复制" class="headerlink" title="标记-复制"></a>标记-复制</h2><h2 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h2><h2 id="分代回收算法"><a href="#分代回收算法" class="headerlink" title="分代回收算法"></a>分代回收算法</h2><p>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introdution&quot;&gt;&lt;a href=&quot;#Introdution&quot; class=&quot;headerlink&quot; title=&quot;Introdution&quot;&gt;&lt;/a&gt;Introdution&lt;/h1&gt;&lt;p&gt;Garbage Collection需要完成的事情：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://vforkliu.github.io/tags/jvm/"/>
    
      <category term="gc" scheme="https://vforkliu.github.io/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Android ART:Image File Format</title>
    <link href="https://vforkliu.github.io/2019/06/21/Android-ART-Image-File-Format/"/>
    <id>https://vforkliu.github.io/2019/06/21/Android-ART-Image-File-Format/</id>
    <published>2019-06-21T11:52:41.000Z</published>
    <updated>2019-06-23T03:35:05.470Z</updated>
    
    <content type="html"><![CDATA[<p>备注：基于Android 8.1.0 分析。</p><h1 id="文件格式定义"><a href="#文件格式定义" class="headerlink" title="文件格式定义"></a>文件格式定义</h1><p>art/runtime/image.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> magic_[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">uint8_t</span> version_[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required base address for mapping the image.</span></span><br><span class="line"><span class="keyword">uint32_t</span> image_begin_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image size, not page aligned.</span></span><br><span class="line"><span class="keyword">uint32_t</span> image_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Checksum of the oat file we link to for load time sanity check.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_checksum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start address for oat file. Will be before oat_data_begin_ for .so files.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_file_begin_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required oat address expected by image Method::GetCode() pointers.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_data_begin_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// End of oat data address range for this image file.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_data_end_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// End of oat file address range. will be after oat_data_end_ for</span></span><br><span class="line"><span class="comment">// .so files. Used for positioning a following alloc spaces.</span></span><br><span class="line"><span class="keyword">uint32_t</span> oat_file_end_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boot image begin and end (app image headers only).</span></span><br><span class="line"><span class="keyword">uint32_t</span> boot_image_begin_;</span><br><span class="line"><span class="keyword">uint32_t</span> boot_image_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boot oat begin and end (app image headers only).</span></span><br><span class="line"><span class="keyword">uint32_t</span> boot_oat_begin_;</span><br><span class="line"><span class="keyword">uint32_t</span> boot_oat_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> We should probably insert a boot image checksum for app images.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The total delta that this image has been patched.</span></span><br><span class="line"><span class="keyword">int32_t</span> patch_delta_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Absolute address of an Object[] of objects needed to reinitialize from an image.</span></span><br><span class="line"><span class="keyword">uint32_t</span> image_roots_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pointer size, this affects the size of the ArtMethods.</span></span><br><span class="line"><span class="keyword">uint32_t</span> pointer_size_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean (0 or 1) to denote if the image was compiled with --compile-pic option</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint32_t</span> compile_pic_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean (0 or 1) to denote if the image can be mapped at a random address, this only refers to</span></span><br><span class="line"><span class="comment">// the .art file. Currently, app oat files do not depend on their app image. There are no pointers</span></span><br><span class="line"><span class="comment">// from the app oat code to the app image.</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint32_t</span> is_pic_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image section sizes/offsets correspond to the uncompressed form.</span></span><br><span class="line">ImageSection sections_[kSectionCount];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image methods, may be inside of the boot image for app images.</span></span><br><span class="line"><span class="keyword">uint64_t</span> image_methods_[kImageMethodsCount];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Storage method for the image, the image may be compressed.</span></span><br><span class="line">StorageMode storage_mode_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data size for the image data excluding the bitmap and the header. For compressed images, this</span></span><br><span class="line"><span class="comment">// is the compressed size in the file.</span></span><br><span class="line"><span class="keyword">uint32_t</span> data_size_;</span><br></pre></td></tr></table></figure></p><p>以一个实际例子对每个字段进行说明</p><img src="/2019/06/21/Android-ART-Image-File-Format/boot-framwork-art-header.png" title="boot-framework.art文件头"><ul><li>magic_:0x61 0x72 0x74 0x0A</li><li><p>version_:0x30 0x34 0x36 0x00 版本号为046<br>art/runtime/image.cc</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> ImageHeader::kImageMagic[] = &#123; <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'\n'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> ImageHeader::kImageVersion[] = &#123; <span class="string">'0'</span>, <span class="string">'4'</span>, <span class="string">'6'</span>, <span class="string">'\0'</span> &#125;;  <span class="comment">// Hash-based methods array.</span></span><br></pre></td></tr></table></figure></li><li><p>image_begin_: image映射到内存的开始地址 </p></li><li>image_size_: image文件大小</li><li>oat_checksum_:0x41B78898</li><li>oat_file_begin_:0x70a5c000</li><li>oat_data_begin_:0x70a5d000</li><li>oat_data_end_:0x7126eef0</li><li>oat_file_end_:0x71273000</li><li>boot_image_begin_:0x00000000</li><li>boot_image_size_:0x00000000</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;备注：基于Android 8.1.0 分析。&lt;/p&gt;
&lt;h1 id=&quot;文件格式定义&quot;&gt;&lt;a href=&quot;#文件格式定义&quot; class=&quot;headerlink&quot; title=&quot;文件格式定义&quot;&gt;&lt;/a&gt;文件格式定义&lt;/h1&gt;&lt;p&gt;art/runtime/image.h&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="android" scheme="https://vforkliu.github.io/tags/android/"/>
    
      <category term="art" scheme="https://vforkliu.github.io/tags/art/"/>
    
  </entry>
  
  <entry>
    <title>JVM:内存区域和内存溢出异常</title>
    <link href="https://vforkliu.github.io/2019/06/21/JVM-Memory-Area-and-OutOfMemoryError/"/>
    <id>https://vforkliu.github.io/2019/06/21/JVM-Memory-Area-and-OutOfMemoryError/</id>
    <published>2019-06-21T06:36:03.000Z</published>
    <updated>2019-06-24T06:10:15.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行时内存区域"><a href="#运行时内存区域" class="headerlink" title="运行时内存区域"></a>运行时内存区域</h1><ul><li>Program Counter Register:程序计数器，线程私有，不会发生OOM的区域。当执行Java方法时，指向正在执行的虚拟机字节码指令的地址，当执行<br>Native方法时，它的值是undefined。</li><li>JVM Stacks: Java虚拟机栈。线程私有。存局部变量、对象引用和returnAdress(指向一条字节码指令的地址)。</li><li>Native Method Stack: 本地方法栈。Java虚拟机为执行本地方法提供的栈。</li><li>Java Heap: Java堆是垃圾收集器管理的主要区域。线程间共享。</li><li>Method Area: 线程共享区域。存已加载的类型信息、常量、静态变量和即时编译器编译后的代码等数据。</li><li>Runtime Constant Pool: 运行时常量池是方法区的一部分。存编译期生成的各种字面量和符号引用。</li><li>Direct Memory: 不是Java虚拟机运行时数据区的一部分。JDK1.4引入的NIO，使用Native函数库直接分配堆外内存。</li></ul><h1 id="对象访问"><a href="#对象访问" class="headerlink" title="对象访问"></a>对象访问</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><ul><li>Java VM Stack: “Object obj” 是一个reference类型数据，存放在Java栈的本地变量表中。</li><li>Java VM Heap: “new Object()” 是一个对象实例，存放在Java堆上。</li><li>Java Method Area: 对象的类型、父类、实现的接口和方法存在方法区。</li></ul><h1 id="实战：OOM"><a href="#实战：OOM" class="headerlink" title="实战：OOM"></a>实战：OOM</h1><h2 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h2><figure class="highlight java"><figcaption><span> Java Heap OOM Example</span><a href="/downloads/code/jvm/HeapOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError HeapOOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span></span>{</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>{</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      list.add(<span class="keyword">new</span> OOMObject());</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"> }</span><br></pre></td></tr></table></figure><p>编译<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HeapOOM.java</span><br></pre></td></tr></table></figure></p><p>运行参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError HeapOOM</span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid83007.hprof ...</span><br><span class="line">Heap dump file created [27583183 bytes in 0.102 secs]</span><br><span class="line">Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3210)</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3181)</span><br><span class="line">at java.util.ArrayList.grow(ArrayList.java:265)</span><br><span class="line">at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)</span><br><span class="line">at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)</span><br><span class="line">at java.util.ArrayList.add(ArrayList.java:462)</span><br><span class="line">at HeapOOM.main(HeapOOM.java:16)</span><br></pre></td></tr></table></figure></p><p>Android Studio 分析 hprof<br><img src="/2019/06/21/JVM-Memory-Area-and-OutOfMemoryError/jvm_heap_oom_hprof.png" title="Android Studio分析hprof"></p><h2 id="虚拟机栈溢出"><a href="#虚拟机栈溢出" class="headerlink" title="虚拟机栈溢出"></a>虚拟机栈溢出</h2><figure class="highlight java"><figcaption><span> Java VM Stack OOM Example</span><a href="/downloads/code/jvm/JavaVMStackSOF.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -Xss128k JavaVMStackSOF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span></span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> stackLength = -<span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span></span>{</span><br><span class="line">    stackLength++;</span><br><span class="line">    stackLeak();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF();</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">      oom.stackLeak();</span><br><span class="line">    }<span class="keyword">catch</span>(Throwable e){</span><br><span class="line">      System.out.println(<span class="string">"stack length:"</span> + oom.stackLength);</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">javac JavaVMStackSOF.java</span><br><span class="line">java -Xss160k JavaVMStackSOF</span><br><span class="line">stack length:770</span><br><span class="line">Exception in thread "main" java.lang.StackOverflowError</span><br><span class="line">at JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:9)</span><br><span class="line">at JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">at JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br></pre></td></tr></table></figure><h2 id="运行时常量池溢出"><a href="#运行时常量池溢出" class="headerlink" title="运行时常量池溢出"></a>运行时常量池溢出</h2><figure class="highlight java"><figcaption><span> Runtime Constant Pool OOM Example</span><a href="/downloads/code/jvm/RuntimeConstantPoolOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span></span>{</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      list.add(String.valueOf(i++).intern());</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0</span><br></pre></td></tr></table></figure><h2 id="方法区溢出"><a href="#方法区溢出" class="headerlink" title="方法区溢出"></a>方法区溢出</h2><figure class="highlight java"><figcaption><span> Method Area OOM Example</span><a href="/downloads/code/jvm/JavaMethodAreaOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javac -cp ".:./cglib-nodep-3.2.12.jar" JavaMethodAreaOOM.java</span></span><br><span class="line"><span class="comment"> * java -XX:PermSize=10M -XX:MaxPermSize=10M -cp ".:./cglib-nodep-3.2.12.jar" JavaMethodAreaOOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethodAreaOOM</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">      enhancer.setSuperclass(OOMObject.class);</span><br><span class="line">      enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">      enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor(){</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj,Method method,Object[] args,MethodProxy proxy)</span><span class="keyword">throws</span> Throwable</span>{</span><br><span class="line">          <span class="keyword">return</span> proxy.invokeSuper(obj,args);</span><br><span class="line">        }</span><br><span class="line">      });</span><br><span class="line">      enhancer.create();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>{</span><br><span class="line">  }</span><br><span class="line"> }</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0</span><br></pre></td></tr></table></figure><h2 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h2><figure class="highlight java"><figcaption><span> Direct Memory OOM Example</span><a href="/downloads/code/jvm/DirectMemoryOOM.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java -Xmx20m -XX:MaxDirectMemorySize=10M DirectMemoryOOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryOOM</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">    Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">    unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe = (Unsafe)unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">      unsafe.allocateMemory(<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运行时内存区域&quot;&gt;&lt;a href=&quot;#运行时内存区域&quot; class=&quot;headerlink&quot; title=&quot;运行时内存区域&quot;&gt;&lt;/a&gt;运行时内存区域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Program Counter Register:程序计数器，线程私有，不会发生OOM的
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://vforkliu.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Build source code viewer with opengrok based docker</title>
    <link href="https://vforkliu.github.io/2019/06/17/Build-source-code-viewer-with-opengrok-based-docker/"/>
    <id>https://vforkliu.github.io/2019/06/17/Build-source-code-viewer-with-opengrok-based-docker/</id>
    <published>2019-06-17T05:05:10.000Z</published>
    <updated>2019-06-17T06:04:26.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Install-images"><a href="#Install-images" class="headerlink" title="Install images"></a>Install images</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull opengrok/docker</span><br></pre></td></tr></table></figure><h1 id="Create-opengrok-directory"><a href="#Create-opengrok-directory" class="headerlink" title="Create opengrok directory"></a>Create opengrok directory</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir opengrok</span><br><span class="line">cd opengrok</span><br><span class="line">mkdir src</span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><ul><li>src:opengrok src root</li><li>data:opengrok index file</li></ul><h1 id="Start-docker"><a href="#Start-docker" class="headerlink" title="Start docker"></a>Start docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e REINDEX=0 -v ~/sourceview/src:/opengrok/src -v ~/sourceview/data:/opengrok/data -p 9090:8080 --name opengrok opengrok/docker:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> reindex</span><br><span class="line">docker exec &lt;container&gt; /scripts/index.sh</span><br><span class="line">docker exec opengrok /scripts/index.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> stop container</span><br><span class="line">docker stop opengrok</span><br><span class="line">docker start opengrok</span><br></pre></td></tr></table></figure><h1 id="You-can-get-inside-a-container-using-the-command-below"><a href="#You-can-get-inside-a-container-using-the-command-below" class="headerlink" title="You can get inside a container using the command below"></a>You can get inside a container using the command below</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container&gt; bash</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://hub.docker.com/r/opengrok/docker/" target="_blank" rel="noopener">https://hub.docker.com/r/opengrok/docker/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Install-images&quot;&gt;&lt;a href=&quot;#Install-images&quot; class=&quot;headerlink&quot; title=&quot;Install images&quot;&gt;&lt;/a&gt;Install images&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="opengrok" scheme="https://vforkliu.github.io/tags/opengrok/"/>
    
      <category term="docker" scheme="https://vforkliu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Debug Android Framework with Android Studio</title>
    <link href="https://vforkliu.github.io/2019/06/05/Debug-Android-Framework-with-Android-Studio/"/>
    <id>https://vforkliu.github.io/2019/06/05/Debug-Android-Framework-with-Android-Studio/</id>
    <published>2019-06-05T01:53:06.000Z</published>
    <updated>2019-06-05T02:02:39.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在阅读Android Framework代码时，有时需要动态调试加深理解，或者想调试某个API的实现原理（如startActivity）时，希望可以使用Android Studio调试，且可以对应到源码的每一行，故需要搭建一个调试环境。</p><h1 id="可选方案"><a href="#可选方案" class="headerlink" title="可选方案"></a>可选方案</h1><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><p>下载并编译某个版本的源码，得到相应的image，加载进模拟器，然后将对应的源码导入到Android Studio。Android源码本身提供了一个工具，可以生成一个Android Studio工程。</p><h2 id="Google-真机"><a href="#Google-真机" class="headerlink" title="Google 真机"></a>Google 真机</h2><p>需要有一台Google系手机，查看该手机的版本去下载对应的源码，利用Android源码里的工具生成Android Studio工程文件，导入到Android Studio。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>上面两个方法网上有一些教程，本人没有试过，不知道是否真的可行。由于这两个方案有几个缺点，故而未使用。</p><ul><li>本人不喜欢使用模拟器作为开发和调试环境。</li><li>下载一份Android源码时间太久，至少需要100G的硬盘空间。</li><li>不能在Windows系统调试。</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>本节描述笔者使用的方法，该方法占用空间小、搭建时间短，可以在Windows系统上使用。本方法要求具备一台Google系手机，当然其他手机也可以，前提是该手机的框架层代码未被手机厂商修改过。</p><p>在Android Studio里如果想查看某个函数（如startActivity）的实现，可以右键跳转到源文件，前提是你下载了对应版本的源码。这里的源码是指android sdk某个版本号（如android-27）的源码。但是在调试的时候，报告源码不匹配，就是说与手机里那一份代码不一样，导致函数的行号对不上。<br>下面介绍制作一个android-27的源码包方法</p><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>查看手机的Build Number，在设置里查看。笔者手机的Build Number是OPM1.171019.016，然后在Google源码官网上比对对应的Branch Name，通过比较发现对应的Branch Name是android-8.1.0_r10。</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd android-sdk-source-code</span><br><span class="line">mkdir –p frameworks/base</span><br><span class="line">git clone --depth 1 https://android.googlesource.com/platform/frameworks/base -b android-8.1.0_r10 frameworks/base</span><br><span class="line">git clone --depth 1 https://android.googlesource.com/platform/libcore -b android-8.1.0_r10</span><br><span class="line">git clone --depth 1 https://android.googlesource.com/platform/development -b android-8.1.0_r10</span><br></pre></td></tr></table></figure><h2 id="创建source-properties"><a href="#创建source-properties" class="headerlink" title="创建source.properties"></a>创建source.properties</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "Pkg.UserSrc=false\nPkg.Revision=1\nAndroidVersion.ApiLevel=27" &gt; source.properties</span><br></pre></td></tr></table></figure><h2 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat development/build/tools/mk_sources_zip.py | sed -e 's/TOP_FOLDER = .*/TOP_FOLDER = "android-27"/' &gt; my_mk_sources_zip.py</span><br></pre></td></tr></table></figure><h2 id="打包源码android-27-sources-zip"><a href="#打包源码android-27-sources-zip" class="headerlink" title="打包源码android-27-sources.zip"></a>打包源码android-27-sources.zip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python my_mk_sources_zip.py -z source.properties android-27-sources.zip</span><br></pre></td></tr></table></figure><h2 id="替换android-sdk并重启Android-Studio"><a href="#替换android-sdk并重启Android-Studio" class="headerlink" title="替换android-sdk并重启Android Studio"></a>替换android-sdk并重启Android Studio</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip android-27-sources.zip -d $&#123;ANDROID_HOME&#125;/sources</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在阅读Android Framework代码时，有时需要动态调试加深理解，或者想调试某个API的实现原理（如startActivity）时，
      
    
    </summary>
    
    
      <category term="android develop" scheme="https://vforkliu.github.io/tags/android-develop/"/>
    
  </entry>
  
  <entry>
    <title>Android 源码分析:startService</title>
    <link href="https://vforkliu.github.io/2019/06/02/Android-Source-Code-Read-startService/"/>
    <id>https://vforkliu.github.io/2019/06/02/Android-Source-Code-Read-startService/</id>
    <published>2019-06-02T02:15:33.000Z</published>
    <updated>2019-06-03T08:40:04.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote><p>W ActivityManager: Background start not allowed: service Intent</p></blockquote><h1 id="Source-Files"><a href="#Source-Files" class="headerlink" title="Source Files"></a>Source Files</h1><ul><li><a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ContextImpl.java" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ContextImpl.java</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ActivityManager.java#getService" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/java/android/app/ActivityManager.java#getService</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</a></li></ul><h1 id="Client-gt-AMS"><a href="#Client-gt-AMS" class="headerlink" title="Client =&gt; AMS"></a>Client =&gt; AMS</h1><h2 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContextImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">false</span>, mUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startForegroundService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">true</span>, mUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="startServiceCommon"><a href="#startServiceCommon" class="headerlink" title="startServiceCommon"></a>startServiceCommon</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ComponentName <span class="title">startServiceCommon</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Intent service, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> requireForeground,</span></span></span><br><span class="line"><span class="function"><span class="params">    UserHandle user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ComponentName cn = ActivityManager.getService().startService(</span><br><span class="line">        mMainThread.getApplicationThread(),</span><br><span class="line">        service,</span><br><span class="line">        service.resolveTypeIfNeeded(getContentResolver()),</span><br><span class="line">        requireForeground,</span><br><span class="line">        getOpPackageName(),</span><br><span class="line">        user.getIdentifier()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getService"><a href="#getService" class="headerlink" title="getService"></a>getService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ActivityManager</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">    <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">            <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</span><br><span class="line">            <span class="keyword">return</span> am;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h1><h2 id="startService-1"><a href="#startService-1" class="headerlink" title="startService"></a>startService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    IApplicationThread caller, </span></span></span><br><span class="line"><span class="function"><span class="params">    Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params">    String resolvedType, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> requireForeground, </span></span></span><br><span class="line"><span class="function"><span class="params">    String callingPackage, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">    ComponentName res;</span><br><span class="line">    res = mServices.startServiceLocked(caller, </span><br><span class="line">        service,</span><br><span class="line">        resolvedType, </span><br><span class="line">        callingPid, </span><br><span class="line">        callingUid,</span><br><span class="line">        requireForeground, </span><br><span class="line">        callingPackage, </span><br><span class="line">        userId);                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityManager.getService().broadcastIntent(<br>                    mMainThread.getApplicationThread(), // caller<br>                    intent,                             // intent<br>                    resolvedType,                       // resolvedType<br>                    null,                               // resultTo<br>                    Activity.RESULT_OK,                 // resultCode<br>                    null,                               // resultData<br>                    null,                               // map<br>                    null,                               // requiredPermissions<br>                    AppOpsManager.OP_NONE,              // appOp<br>                    null,                               // options<br>                    false,                              // serialized<br>                    false,                              // stick<br>                    getUserId()<br>                    );</p><p>_data.writeInterfaceToken(“android.app.IActivityManager”);<br>          _data.writeStrongBinder((caller != null) ? caller.asBinder() : null);<br>          if (intent != null) {<br>            _data.writeInt(1);<br>            intent.writeToParcel(_data, 0);<br>          } else {</p><pre><code>  _data.writeInt(0);} _data.writeString(resolvedType);_data.writeStrongBinder((resultTo != null) ? resultTo.asBinder() : null);_data.writeInt(resultCode);_data.writeString(resultData);if (map != null) {  _data.writeInt(1);  map.writeToParcel(_data, 0);} else {  _data.writeInt(0);} _data.writeStringArray(requiredPermissions);_data.writeInt(appOp);if (options != null) {  _data.writeInt(1);  options.writeToParcel(_data, 0);} else {  _data.writeInt(0);} _data.writeInt(serialized ? 1 : 0);_data.writeInt(sticky ? 1 : 0);_data.writeInt(userId);</code></pre><h1 id="AMS-gt-Client"><a href="#AMS-gt-Client" class="headerlink" title="AMS =&gt; Client"></a>AMS =&gt; Client</h1><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;W ActivityManager: Background start n
      
    
    </summary>
    
    
      <category term="android source code" scheme="https://vforkliu.github.io/tags/android-source-code/"/>
    
  </entry>
  
  <entry>
    <title>C++ Virtual Inherit</title>
    <link href="https://vforkliu.github.io/2019/05/31/C-Virtual-Inherit/"/>
    <id>https://vforkliu.github.io/2019/05/31/C-Virtual-Inherit/</id>
    <published>2019-05-31T06:13:47.000Z</published>
    <updated>2019-05-31T10:31:05.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单类的虚拟继承"><a href="#简单类的虚拟继承" class="headerlink" title="简单类的虚拟继承"></a>简单类的虚拟继承</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit Simple Example</span><a href="/downloads/code/multi-inherit-virtual-simple/jni/virtual_multi_inherit_simple.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">     ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">     ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">     ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><img src="/2019/05/31/C-Virtual-Inherit/class_memory_layout_vi_simple.png" title="virtual inherit without virtual function"><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="类C的构造函数"><a href="#类C的构造函数" class="headerlink" title="类C的构造函数"></a>类C的构造函数</h3><img src="/2019/05/31/C-Virtual-Inherit/class_c_constructor.png" title="class C constructor"><h3 id="类D的构造函数"><a href="#类D的构造函数" class="headerlink" title="类D的构造函数"></a>类D的构造函数</h3><img src="/2019/05/31/C-Virtual-Inherit/class_d_constructor.png" title="class D constructor"><h1 id="带虚函数的虚拟继承"><a href="#带虚函数的虚拟继承" class="headerlink" title="带虚函数的虚拟继承"></a>带虚函数的虚拟继承</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit VTable Example</span><a href="/downloads/code/multi-inherit-virtual-vtbl/jni/virtual_multi_inherit_vtbl.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="内存布局-1"><a href="#内存布局-1" class="headerlink" title="内存布局"></a>内存布局</h2><img src="/2019/05/31/C-Virtual-Inherit/class_memory_layout_vi_vtbl.png" title="virtual inherit with virtual function"><h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="类B的虚函数表"><a href="#类B的虚函数表" class="headerlink" title="类B的虚函数表"></a>类B的虚函数表</h3><img src="/2019/05/31/C-Virtual-Inherit/vtable_b.png" title="class B virtual method table"><p>0x8 : offset vbase<br>0x0 : offset to this<br>0x0 : typeinfo</p><h3 id="类B的构造函数"><a href="#类B的构造函数" class="headerlink" title="类B的构造函数"></a>类B的构造函数</h3><img src="/2019/05/31/C-Virtual-Inherit/class_b_constructor_vtable.png" title="class B constructor"><p>+0xC 是类B的虚函数表地址<br>+0x34 也是类B的虚函数表地址  用于覆盖base class的vptr</p><h3 id="VTT-Virtual-Table-Table"><a href="#VTT-Virtual-Table-Table" class="headerlink" title="VTT(Virtual Table Table)"></a>VTT(Virtual Table Table)</h3><img src="/2019/05/31/C-Virtual-Inherit/vtt_d.png" title="class D VTT"><h3 id="Class-D-virtual-method-table"><a href="#Class-D-virtual-method-table" class="headerlink" title="Class D virtual method table"></a>Class D virtual method table</h3><img src="/2019/05/31/C-Virtual-Inherit/vtable_d.png" title="class D vtable"><h3 id="Class-D-constructor"><a href="#Class-D-constructor" class="headerlink" title="Class D constructor"></a>Class D constructor</h3><img src="/2019/05/31/C-Virtual-Inherit/class_d_constructor_vtable.png" title="class D constructor"><p>执行步骤</p><ul><li>执行 A的构造函数  this + 0x14  offset to object d</li><li>执行 B的构造函数  this + 0x00  注意这个B的构造函数 是隐式生成的，在这里面不会执行A的构造函数</li><li>执行 C的构造函数  this + 0x08  </li><li>覆盖 B的vptr   [this+0x00] = vtbl_d + 0x0c    0x5c98  可对比class D的虚函数表</li><li>覆盖 A的vptr   [this+0x14] = vtbl_d + 0x50    0x5cdc</li><li>覆盖 C的vptr   [this+0x08] = vtbl_d + 0x2c    0x5cb8</li></ul><h3 id="Class-B-constructor-隐式"><a href="#Class-B-constructor-隐式" class="headerlink" title="Class B constructor(隐式)"></a>Class B constructor(隐式)</h3><img src="/2019/05/31/C-Virtual-Inherit/class_b_constructor_vtt.png" title="class B constructor for VTT"><p>执行步骤</p><ul><li>vptr = construction for vtable B-in-D + 0x0C</li><li>vbase ptr 计算：vptr - 0xC 的位置存放了this指针与虚基类的偏移量(vbase offset to this) value=0x14</li><li>vbase vptr = construction for vtable B-in-D + 0x34</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://xr1s.me/2018/03/13/the-way-to-dynamic-dispatch-vtable/" target="_blank" rel="noopener">https://xr1s.me/2018/03/13/the-way-to-dynamic-dispatch-vtable/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单类的虚拟继承&quot;&gt;&lt;a href=&quot;#简单类的虚拟继承&quot; class=&quot;headerlink&quot; title=&quot;简单类的虚拟继承&quot;&gt;&lt;/a&gt;简单类的虚拟继承&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="c++" scheme="https://vforkliu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++ Virtual Method Table</title>
    <link href="https://vforkliu.github.io/2019/05/31/C-Virtual-Method-Table/"/>
    <id>https://vforkliu.github.io/2019/05/31/C-Virtual-Method-Table/</id>
    <published>2019-05-31T02:16:42.000Z</published>
    <updated>2019-05-31T06:38:20.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文的代码使用android-ndk编译，在armeabi-v7a下研究，基于IDA Pro得出结论。</p><h1 id="简单类继承"><a href="#简单类继承" class="headerlink" title="简单类继承"></a>简单类继承</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit Simple Example</span><a href="/downloads/code/multi-inherit-normal-simple/jni/normal_multi_inherit_simple.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">     ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">     ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">     ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="在IDA中的内存布局"><a href="#在IDA中的内存布局" class="headerlink" title="在IDA中的内存布局"></a>在IDA中的内存布局</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class d memory layout</span><br><span class="line">---------------------</span><br><span class="line">+ 0x00 baseclass_B</span><br><span class="line">+ 0x00    baseclass_A</span><br><span class="line">+ 0x00        m_a</span><br><span class="line">+ 0x04    m_b</span><br><span class="line">+ 0x08 baseclass_C</span><br><span class="line">+ 0x08    baseclass_A</span><br><span class="line">+ 0x08        m_a</span><br><span class="line">+ 0x0C    m_c</span><br><span class="line">+ 0x10 m_d</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure><img src="/2019/05/31/C-Virtual-Method-Table/class_memory_layout_normal_simple.png" title="简单类的内存布局"><h1 id="带有虚函数的类继承"><a href="#带有虚函数的类继承" class="headerlink" title="带有虚函数的类继承"></a>带有虚函数的类继承</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span> Multi-Inherit Simple Example</span><a href="/downloads/code/multi-inherit-normal-vtbl/jni/normal_multi_inherit_vtbl.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> a = <span class="number">0</span>):m_a(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"A::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~A(){ <span class="built_in">printf</span>(<span class="string">"A::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"A::goo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="comment">// std::string m_name;</span></span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> b = <span class="number">0</span>):m_b(b){<span class="built_in">printf</span>(<span class="string">"B::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~B(){<span class="built_in">printf</span>(<span class="string">"B::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::hoo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ioo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"B::ioo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> c = <span class="number">0</span>):m_c(<span class="number">0</span>){<span class="built_in">printf</span>(<span class="string">"C::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~C(){<span class="built_in">printf</span>(<span class="string">"C::destructor()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::foo()"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">joo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"C::joo()"</span>);}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D(<span class="keyword">int</span> d = <span class="number">0</span>):m_d(d){<span class="built_in">printf</span>(<span class="string">"D::constructor()"</span>);}</span><br><span class="line">    <span class="keyword">virtual</span> ~D(){<span class="built_in">printf</span>(<span class="string">"D::destructor"</span>);}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="built_in">printf</span>(<span class="string">"D::foo()"</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    D d;</span><br><span class="line"></span><br><span class="line">   a.foo();</span><br><span class="line">   b.foo();</span><br><span class="line">   c.foo();</span><br><span class="line">   d.foo();</span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of a:" &lt;&lt; sizeof(a) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of b:" &lt;&lt; sizeof(b) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of c:" &lt;&lt; sizeof(c) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; "size of d:" &lt;&lt; sizeof(d) &lt;&lt; endl;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof a:%d"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof b:%d"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof c:%d"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sizeof d:%d"</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">   B* pd = <span class="keyword">new</span> D(<span class="number">1</span>);</span><br><span class="line">   pd-&gt;foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><img src="/2019/05/31/C-Virtual-Method-Table/class_memory_layout_normal_vtbl.png" title="带有虚函数的内存布局"><h2 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h2><img src="/2019/05/31/C-Virtual-Method-Table/virtual_method_table.png" title="virtual method table"><p>从上图看，类A,B,C的虚函数表布局很好理解，子类如果override了父类的虚函数，那么子类的虚函数表里的函数地址就是子类实现的函数。我们只关注<br>类D的虚函数表布局。<br>两个问题：</p><h3 id="为什么有两个析构函数"><a href="#为什么有两个析构函数" class="headerlink" title="为什么有两个析构函数"></a>为什么有两个析构函数</h3><p>对析构函数函数命名的说明</p><blockquote><p>D2 is the “base object destructor”. It destroys the object itself, as well as data members and non-virtual base classes.<br>D1 is the “complete object destructor”. It additionally destroys virtual base classes.<br>D0 is the “deleting object destructor”. It does everything the complete object destructor does, plus it calls operator delete to actually free the memory.</p></blockquote><p>虚析构函数都是成对出现的</p><blockquote><p>The entries for virtual destructors are actually pairs of entries. The first destructor, called the complete object destructor, performs the destruction without calling delete() on the object. The second destructor, called the deleting destructor, calls delete() after destroying the object. </p></blockquote><p>以类D为例说明两个析构函数的差别</p><ul><li><p>_ZN1DD2Ev:栈上的对象析构函的时候调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    D d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>_ZN1DD0Ev:堆上的对象析构函的时候调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    D* d = <span class="keyword">new</span> D(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">delete</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="non-virtual-thunk是什么"><a href="#non-virtual-thunk是什么" class="headerlink" title="non-virtual-thunk是什么"></a>non-virtual-thunk是什么</h3><img src="/2019/05/31/C-Virtual-Method-Table/d_non_virtual_thunk.png" title="class D non-virtual thunk method"><p>在多继承中用于调整this的位置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    C* d = <span class="keyword">new</span> D(<span class="number">0</span>);   <span class="comment">// d 指向了D object + 0xC的位置，</span></span><br><span class="line">    <span class="keyword">delete</span> d;          <span class="comment">// 执行析构函数的时候利用non-virtual thunk调整回去 -0xC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="类A的构造函数"><a href="#类A的构造函数" class="headerlink" title="类A的构造函数"></a>类A的构造函数</h3><img src="/2019/05/31/C-Virtual-Method-Table/a_constructor.png" title="class A constructor method"><p>类A内存布局的第1个4字节存放的是虚函数表指针。</p><h3 id="类B的构造函数"><a href="#类B的构造函数" class="headerlink" title="类B的构造函数"></a>类B的构造函数</h3><img src="/2019/05/31/C-Virtual-Method-Table/b_constructor.png" title="class B constructor method"><ul><li>先执行父类的构造函数</li><li>赋值虚函数表指针,覆盖了父类构造函数设置的虚函数表指针</li><li><p>初始化m_b</p><p>类C的构造函数与类B相同。</p></li></ul><h3 id="类D的构造函数"><a href="#类D的构造函数" class="headerlink" title="类D的构造函数"></a>类D的构造函数</h3><img src="/2019/05/31/C-Virtual-Method-Table/d_constructor.png" title="class D constructor method"><ul><li>依次执行B、C的构造函数</li><li>C构造函数的this + 0xC   可以对照D的内存布局</li><li>D类有两个虚函数表指针：vtbl+8,vtbl+0x24</li><li>初始化m_d</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;本文的代码使用android-ndk编译，在armeabi-v7a下研究，基于IDA Pro得出结论。&lt;/p&gt;
&lt;h1 id=&quot;简单类继承&quot;
      
    
    </summary>
    
    
      <category term="c++" scheme="https://vforkliu.github.io/tags/c/"/>
    
      <category term="virtual method" scheme="https://vforkliu.github.io/tags/virtual-method/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 使用指南</title>
    <link href="https://vforkliu.github.io/2019/05/31/Markdown-User-Guide/"/>
    <id>https://vforkliu.github.io/2019/05/31/Markdown-User-Guide/</id>
    <published>2019-05-31T02:15:19.000Z</published>
    <updated>2019-05-31T03:05:16.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><p>直接嵌入代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   print(<span class="string">"Hello,Python!"</span>)</span><br></pre></td></tr></table></figure></li><li><p>嵌入文件中的代码</p><figure class="highlight cpp"><figcaption><span> Hello World in C++</span><a href="/downloads/code/hello_world.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello,C++"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><img src="/2019/05/31/Markdown-User-Guide/class_memory_layout_normal_vtbl.png" title="带有虚函数的内存布局"><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接嵌入代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="markdown" scheme="https://vforkliu.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-0050-pow</title>
    <link href="https://vforkliu.github.io/2019/05/29/LeetCode-0050-pow/"/>
    <id>https://vforkliu.github.io/2019/05/29/LeetCode-0050-pow/</id>
    <published>2019-05-29T07:06:06.000Z</published>
    <updated>2019-05-29T07:07:45.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><a href="https://leetcode.com/problems/powx-n/" target="_blank" rel="noopener">https://leetcode.com/problems/powx-n/</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> half <span class="keyword">float64</span> = myPow(x,n/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> half * half</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> half * half * x</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> half * half / x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/powx-n/&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://vforkliu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Android 安装源码分析</title>
    <link href="https://vforkliu.github.io/2019/05/29/Android-PM/"/>
    <id>https://vforkliu.github.io/2019/05/29/Android-PM/</id>
    <published>2019-05-29T02:11:32.000Z</published>
    <updated>2019-05-29T04:46:35.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h1><p><a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/system/core/adb/commandline.cpp#send_shell_command" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/adb/commandline.cpp#send_shell_command</a><br><a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/content/pm/PackageManager.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/content/pm/PackageManager.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/org/apache/harmony/security/utils/JarUtils.java#68" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/org/apache/harmony/security/utils/JarUtils.java#68</a></p><h1 id="SignatureSpi"><a href="#SignatureSpi" class="headerlink" title="SignatureSpi"></a>SignatureSpi</h1><p><a href="http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/DigestSignatureSpi.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/DigestSignatureSpi.java</a><br><a href="http://androidxref.com/9.0.0_r3/xref/external/conscrypt/common/src/main/java/org/conscrypt/OpenSSLSignature.java" target="_blank" rel="noopener">http://androidxref.com/9.0.0_r3/xref/external/conscrypt/common/src/main/java/org/conscrypt/OpenSSLSignature.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/external/bouncycastle/bcprov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java</a><br><a href="http://androidxref.com/6.0.1_r10/xref/external/conscrypt/src/main/java/org/conscrypt/OpenSSLSignatureRawRSA.java" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/external/conscrypt/src/main/java/org/conscrypt/OpenSSLSignatureRawRSA.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// collectCertificates</span></span><br><span class="line">    <span class="comment">// collectManifestDigest</span></span><br><span class="line">    pp.collectCertificates(pkg, parseFlags);</span><br><span class="line">    pp.collectManifestDigest(pkg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call Stack<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.security.Signature.verify(&lt;Xposed&gt;:-1)</span><br><span class="line">org.apache.harmony.security.utils.JarUtils.verifySignature(JarUtils.java:224)</span><br><span class="line">at java.util.jar.JarVerifier.verifyCertificate(JarVerifier.java:294)</span><br><span class="line">at java.util.jar.JarVerifier.readCertificates(JarVerifier.java:268)</span><br><span class="line">at java.util.jar.StrictJarFile.&lt;init&gt;(StrictJarFile.java:75)</span><br><span class="line">at android.content.pm.PackageParser.collectCertificates(PackageParser.java:1073)</span><br><span class="line">at android.content.pm.PackageParser.collectCertificates(PackageParser.java:1058)</span><br><span class="line">at com.android.server.pm.PackageManagerService.installPackageLI(PackageManagerService.java:12508)</span><br><span class="line">at com.android.server.pm.PackageManagerService.-wrap25(PackageManagerService.java:-1)</span><br><span class="line">at com.android.server.pm.PackageManagerService$9.run(PackageManagerService.java:10410)</span><br><span class="line">at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">at android.os.Looper.loop(Looper.java:148)</span><br><span class="line">at android.os.HandlerThread.run(HandlerThread.java:61)</span><br><span class="line">at com.android.server.ServiceThread.run(ServiceThread.java:46)</span><br></pre></td></tr></table></figure></p><h1 id="核心破解"><a href="#核心破解" class="headerlink" title="核心破解"></a>核心破解</h1><p>com.android.org.conscrypt.OpenSSLSignature.engineVerify</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://androidxref.com/6.0.1_r10/xref/frameworks/base
      
    
    </summary>
    
    
      <category term="android security" scheme="https://vforkliu.github.io/tags/android-security/"/>
    
  </entry>
  
  <entry>
    <title>c++ 继承</title>
    <link href="https://vforkliu.github.io/2019/05/27/c-inherit/"/>
    <id>https://vforkliu.github.io/2019/05/27/c-inherit/</id>
    <published>2019-05-27T01:46:12.000Z</published>
    <updated>2019-05-31T07:42:20.920Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">export NDK_ROOT=~/android-ndk-r18b</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang</span><br><span class="line">  --target=x86_64-none-linux-android</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/x86_64-4.9/prebuilt/linux-x86_64</span><br><span class="line">  --sysroot=$&#123;NDK_ROOT&#125;/sysroot</span><br><span class="line">  -isystem $&#123;NDK_ROOT&#125;/sysroot/usr/include/x86_64-linux-android</span><br><span class="line">  -pie -o  hello.c.o -c hello.c</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang</span><br><span class="line">  --target=x86_64-none-linux-android</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/x86_64-4.9/prebuilt/linux-x86_64</span><br><span class="line">  --sysroot  $&#123;NDK_ROOT&#125;/platforms/android-21/arch-x86_64</span><br><span class="line">  -pie hello.c.o -o hello</span><br><span class="line"></span><br><span class="line"><span class="meta">  $</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang \</span><br><span class="line">  --target=armv7-none-linux-androideabi \</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/arm-linux-androideabi-4.9 \</span><br><span class="line">  --sysroot=$&#123;NDK_ROOT&#125;/sysroot \</span><br><span class="line">  -isystem $&#123;NDK_ROOT&#125;/sysroot/usr/include/arm-linux-androideabi \</span><br><span class="line">  -pie \</span><br><span class="line">  -o  hello.c.o -c hello.c</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;NDK_ROOT&#125;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang</span><br><span class="line">  --target=armv7-none-linux-androideabi</span><br><span class="line">  --gcc-toolchain=$&#123;NDK_ROOT&#125;/toolchains/arm-linux-androideabi-4.9/...</span><br><span class="line">  --sysroot  $&#123;NDK_ROOT&#125;/platforms/android-21/arch-arm</span><br><span class="line">  -pie hello.c.o -o hello</span><br></pre></td></tr></table></figure><h1 id="简单多继承"><a href="#简单多继承" class="headerlink" title="简单多继承"></a>简单多继承</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>clang -cc1 -emit-llvm -fdump-record-layouts -stdlib=libc++ normal_multi_inherit_simple.cpp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class A</span><br><span class="line">         0 |   int m_a</span><br><span class="line">           | [sizeof=4, dsize=4, align=4,</span><br><span class="line">           |  nvsize=4, nvalign=4]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class B</span><br><span class="line">         0 |   class A (base)</span><br><span class="line">         0 |     int m_a</span><br><span class="line">         4 |   int m_b</span><br><span class="line">           | [sizeof=8, dsize=8, align=4,</span><br><span class="line">           |  nvsize=8, nvalign=4]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class C</span><br><span class="line">         0 |   class A (base)</span><br><span class="line">         0 |     int m_a</span><br><span class="line">         4 |   int m_c</span><br><span class="line">           | [sizeof=8, dsize=8, align=4,</span><br><span class="line">           |  nvsize=8, nvalign=4]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class D</span><br><span class="line">         0 |   class B (base)</span><br><span class="line">         0 |     class A (base)</span><br><span class="line">         0 |       int m_a</span><br><span class="line">         4 |     int m_b</span><br><span class="line">         8 |   class C (base)</span><br><span class="line">         8 |     class A (base)</span><br><span class="line">         8 |       int m_a</span><br><span class="line">        12 |     int m_c</span><br><span class="line">        16 |   int m_d</span><br><span class="line">           | [sizeof=20, dsize=20, align=4,</span><br><span class="line">           |  nvsize=20, nvalign=4]</span><br></pre></td></tr></table></figure><h1 id="带虚函数的多继承"><a href="#带虚函数的多继承" class="headerlink" title="带虚函数的多继承"></a>带虚函数的多继承</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class A</span><br><span class="line">         0 |   (A vtable pointer)</span><br><span class="line">         8 |   int m_a</span><br><span class="line">           | [sizeof=16, dsize=12, align=8,</span><br><span class="line">           |  nvsize=12, nvalign=8]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class B</span><br><span class="line">         0 |   class A (primary base)</span><br><span class="line">         0 |     (A vtable pointer)</span><br><span class="line">         8 |     int m_a</span><br><span class="line">        12 |   int m_b</span><br><span class="line">           | [sizeof=16, dsize=16, align=8,</span><br><span class="line">           |  nvsize=16, nvalign=8]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class C</span><br><span class="line">         0 |   class A (primary base)</span><br><span class="line">         0 |     (A vtable pointer)</span><br><span class="line">         8 |     int m_a</span><br><span class="line">        12 |   int m_c</span><br><span class="line">           | [sizeof=16, dsize=16, align=8,</span><br><span class="line">           |  nvsize=16, nvalign=8]</span><br><span class="line"></span><br><span class="line">*** Dumping AST Record Layout</span><br><span class="line">         0 | class D</span><br><span class="line">         0 |   class B (primary base)</span><br><span class="line">         0 |     class A (primary base)</span><br><span class="line">         0 |       (A vtable pointer)</span><br><span class="line">         8 |       int m_a</span><br><span class="line">        12 |     int m_b</span><br><span class="line">        16 |   class C (base)</span><br><span class="line">        16 |     class A (primary base)</span><br><span class="line">        16 |       (A vtable pointer)</span><br><span class="line">        24 |       int m_a</span><br><span class="line">        28 |     int m_c</span><br><span class="line">        32 |   int m_d</span><br><span class="line">           | [sizeof=40, dsize=36, align=8,</span><br><span class="line">           |  nvsize=36, nvalign=8]</span><br></pre></td></tr></table></figure><h1 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h1><p>共享虚基类,典型的例子iostream</p><p>clang 输出内存布局<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clang -cc1 -fdump-record-layouts -stdlib=libc++ vinherit.cpp</span><br><span class="line">clang -cc1 -emit-llvm -fdump-record-layouts -stdlib=libc++ normal_multi_inherit.cpp</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B,<span class="keyword">public</span> C&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(d) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 12</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clang++ -cc1 -emit-llvm -fdump-record-layouts -stdlib=libc++ normal_multi_inherit_simple.cpp</p><p>_ZTV is a prefix for vtable,<br>_ZTS is a prefix for type-string (name)<br>_ZTI is for type-info.</p><p>VTT<br>virtual thunk to<br>no-virtual thunk to</p><p>typeinfo<br>vtable pointer = vtable + 0x10 (64bit)</p><h1 id="imp-cxa-pure-virtual"><a href="#imp-cxa-pure-virtual" class="headerlink" title="imp_cxa_pure_virtual"></a><strong>imp_</strong>cxa_pure_virtual</h1><h1 id="destructor"><a href="#destructor" class="headerlink" title="destructor"></a>destructor</h1><p>D2 is the “base object destructor”. It destroys the object itself, as well as data members and non-virtual base classes.<br>D1 is the “complete object destructor”. It additionally destroys virtual base classes.<br>D0 is the “deleting object destructor”. It does everything the complete object destructor does, plus it calls operator delete to actually free the memory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="c++" scheme="https://vforkliu.github.io/tags/c/"/>
    
      <category term="arm" scheme="https://vforkliu.github.io/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>android unicode 字符串</title>
    <link href="https://vforkliu.github.io/2019/05/24/android-unicode-string/"/>
    <id>https://vforkliu.github.io/2019/05/24/android-unicode-string/</id>
    <published>2019-05-24T05:05:38.000Z</published>
    <updated>2019-05-24T05:17:44.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h1><ul><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/Unicode.h" target="_blank" rel="noopener">Unicode.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/Unicode.cpp" target="_blank" rel="noopener">Unicode.cpp</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/String8.h" target="_blank" rel="noopener">String8.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/String8.cpp" target="_blank" rel="noopener">String8.cpp</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/String16.h" target="_blank" rel="noopener">String16.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/String16.cpp" target="_blank" rel="noopener">String16.cpp</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/SharedBuffer.h" target="_blank" rel="noopener">SharedBuffer.h</a></li><li><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/SharedBuffer.cpp" target="_blank" rel="noopener">SharedBuffer.cpp</a></li></ul><h1 id="String16"><a href="#String16" class="headerlink" title="String16"></a>String16</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/system/core/libutils/String16.cpp#allocFromUTF8</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> char16_t* <span class="title">allocFromUTF8</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* u8str, <span class="keyword">size_t</span> u8len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">ssize_t</span> u16len = utf8_to_utf16_length(u8cur, u8len);</span><br><span class="line">    utf8_to_utf16(u8cur, u8len, u16str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! This is a string holding UTF-16 characters.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String16</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char16_t</span>*     mString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://androidxref.com/6.0.1_r10/xref/system/co
      
    
    </summary>
    
    
      <category term="android" scheme="https://vforkliu.github.io/tags/android/"/>
    
      <category term="unicode" scheme="https://vforkliu.github.io/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>android 智能指针</title>
    <link href="https://vforkliu.github.io/2019/05/24/android-smart-pointer/"/>
    <id>https://vforkliu.github.io/2019/05/24/android-smart-pointer/</id>
    <published>2019-05-24T04:55:08.000Z</published>
    <updated>2019-05-27T01:37:45.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h1><p><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/StrongPointer.h" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/StrongPointer.h</a><br><a href="http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/RefBase.h" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/include/utils/RefBase.h</a><br><a href="http://androidxref.com/6.0.1_r10/xref/system/core/libutils/RefBase.cpp" target="_blank" rel="noopener">http://androidxref.com/6.0.1_r10/xref/system/core/libutils/RefBase.cpp</a></p><h1 id="StrongPointer"><a href="#StrongPointer" class="headerlink" title="StrongPointer"></a>StrongPointer</h1><h1 id="INITIAL-STRONG-VALUE-为什么不是0"><a href="#INITIAL-STRONG-VALUE-为什么不是0" class="headerlink" title="INITIAL_STRONG_VALUE 为什么不是0"></a>INITIAL_STRONG_VALUE 为什么不是0</h1><p>区分从来没有指针引用该对象，还是没有指针引用该对象<br>如果从来没有调用过，那么mStrong为INITIAL_STRONG_VALUE<br>如果没有指针引用该对象，mStrong = 0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://androidxref.com/6.0.1_r10/xref/system/core/inc
      
    
    </summary>
    
    
      <category term="android" scheme="https://vforkliu.github.io/tags/android/"/>
    
      <category term="smart pointer" scheme="https://vforkliu.github.io/tags/smart-pointer/"/>
    
  </entry>
  
  <entry>
    <title>android binder 详解</title>
    <link href="https://vforkliu.github.io/2019/05/24/android-binder-detail/"/>
    <id>https://vforkliu.github.io/2019/05/24/android-binder-detail/</id>
    <published>2019-05-24T01:50:01.000Z</published>
    <updated>2019-05-24T02:12:57.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.zhihu.com/question/39440766/answer/89210950" target="_blank" rel="noopener">为什么 Android 要采用 Binder 作为 IPC 机制？</a><br><a href="https://www.zhihu.com/question/41003297/answer/89328987?from=profile_answer_card" target="_blank" rel="noopener">Android源码的Binder权限是如何控制？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/39440766/answer/892109
      
    
    </summary>
    
    
      <category term="android." scheme="https://vforkliu.github.io/tags/android/"/>
    
      <category term="binder" scheme="https://vforkliu.github.io/tags/binder/"/>
    
  </entry>
  
  <entry>
    <title>Android 源码开发</title>
    <link href="https://vforkliu.github.io/2019/05/23/build-android-source/"/>
    <id>https://vforkliu.github.io/2019/05/23/build-android-source/</id>
    <published>2019-05-23T07:20:41.000Z</published>
    <updated>2019-05-24T01:48:27.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备开发环境"><a href="#准备开发环境" class="headerlink" title="准备开发环境"></a>准备开发环境</h1><p>使用docker-aosp搭建</p><h1 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh </span><br><span class="line">including device/asus/deb/vendorsetup.sh</span><br><span class="line">including device/asus/flo/vendorsetup.sh</span><br><span class="line">including device/asus/fugu/vendorsetup.sh</span><br><span class="line">including device/generic/mini-emulator-arm64/vendorsetup.sh</span><br><span class="line">including device/generic/mini-emulator-armv7-a-neon/vendorsetup.sh</span><br><span class="line">including device/generic/mini-emulator-mips/vendorsetup.sh</span><br><span class="line">including device/generic/mini-emulator-x86/vendorsetup.sh</span><br><span class="line">including device/generic/mini-emulator-x86_64/vendorsetup.sh</span><br><span class="line">including device/htc/flounder/vendorsetup.sh</span><br><span class="line">including device/huawei/angler/vendorsetup.sh</span><br><span class="line">including device/lge/bullhead/vendorsetup.sh</span><br><span class="line">including device/lge/hammerhead/vendorsetup.sh</span><br><span class="line">including device/moto/shamu/vendorsetup.sh</span><br><span class="line">including sdk/bash_completion/adb.bash</span><br></pre></td></tr></table></figure><ul><li>lunch<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">lunch</span><br><span class="line">You\'re building on Linux</span><br><span class="line"></span><br><span class="line">Lunch menu... pick a combo:</span><br><span class="line">     1. aosp_arm-eng</span><br><span class="line">     2. aosp_arm64-eng</span><br><span class="line">     3. aosp_mips-eng</span><br><span class="line">     4. aosp_mips64-eng</span><br><span class="line">     5. aosp_x86-eng</span><br><span class="line">     6. aosp_x86_64-eng</span><br><span class="line">     7. aosp_deb-userdebug</span><br><span class="line">     8. aosp_flo-userdebug</span><br><span class="line">     9. full_fugu-userdebug</span><br><span class="line">     10. aosp_fugu-userdebug</span><br><span class="line">     11. mini_emulator_arm64-userdebug</span><br><span class="line">     12. m_e_arm-userdebug</span><br><span class="line">     13. mini_emulator_mips-userdebug</span><br><span class="line">     14. mini_emulator_x86-userdebug</span><br><span class="line">     15. mini_emulator_x86_64-userdebug</span><br><span class="line">     16. aosp_flounder-userdebug</span><br><span class="line">     17. aosp_angler-userdebug</span><br><span class="line">     18. aosp_bullhead-userdebug</span><br><span class="line">     19. aosp_hammerhead-userdebug</span><br><span class="line">     20. aosp_hammerhead_fp-userdebug</span><br><span class="line">     21. aosp_shamu-userdebug</span><br><span class="line"></span><br><span class="line">Which would you like? [aosp_arm-eng] </span><br><span class="line"></span><br><span class="line">============================================</span><br><span class="line">PLATFORM_VERSION_CODENAME=REL</span><br><span class="line">PLATFORM_VERSION=6.0.1</span><br><span class="line">TARGET_PRODUCT=aosp_arm</span><br><span class="line">TARGET_BUILD_VARIANT=eng</span><br><span class="line">TARGET_BUILD_TYPE=release</span><br><span class="line">TARGET_BUILD_APPS=</span><br><span class="line">TARGET_ARCH=arm</span><br><span class="line">TARGET_ARCH_VARIANT=armv7-a</span><br><span class="line">TARGET_CPU_VARIANT=generic</span><br><span class="line">TARGET_2ND_ARCH=</span><br><span class="line">TARGET_2ND_ARCH_VARIANT=</span><br><span class="line">TARGET_2ND_CPU_VARIANT=</span><br><span class="line">HOST_ARCH=x86_64</span><br><span class="line">HOST_OS=linux</span><br><span class="line">HOST_OS_EXTRA=Linux-4.4.0-33.bm.1-amd64-x86_64-with-Ubuntu-14.04-trusty</span><br><span class="line">HOST_BUILD_TYPE=release</span><br><span class="line">BUILD_ID=MOB31Z</span><br><span class="line">OUT_DIR=out</span><br><span class="line">============================================</span><br></pre></td></tr></table></figure></li></ul><h1 id="编译自己的模块"><a href="#编译自己的模块" class="headerlink" title="编译自己的模块"></a>编译自己的模块</h1><p>一般在external目录下建立自己的模块工程<br>编译命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmm ./external/HelloWorld</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备开发环境&quot;&gt;&lt;a href=&quot;#准备开发环境&quot; class=&quot;headerlink&quot; title=&quot;准备开发环境&quot;&gt;&lt;/a&gt;准备开发环境&lt;/h1&gt;&lt;p&gt;使用docker-aosp搭建&lt;/p&gt;
&lt;h1 id=&quot;编译步骤&quot;&gt;&lt;a href=&quot;#编译步骤&quot; clas
      
    
    </summary>
    
    
      <category term="android" scheme="https://vforkliu.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>docker 基础</title>
    <link href="https://vforkliu.github.io/2019/05/23/docker-basics/"/>
    <id>https://vforkliu.github.io/2019/05/23/docker-basics/</id>
    <published>2019-05-23T03:14:28.000Z</published>
    <updated>2019-05-23T07:19:10.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --rm \</span><br><span class="line">    -it \</span><br><span class="line">    -e USER_ID=1001 \</span><br><span class="line">    -e GROUP_ID=1002 \</span><br><span class="line">    -v /data00/home/liujun.sun/aosp-6.0.1_r80/build-test.sh:/usr/local/bin/run.sh:ro \</span><br><span class="line">    -v /home/liujun.sun/aosp-6.0.1_r80/aosp:/aosp \</span><br><span class="line">    -v /home/liujun.sun/aosp-6.0.1_r80/ccache:/tmp/ccache \</span><br><span class="line">    kylemanna/aosp:6.0-marshmallow \</span><br><span class="line">    bash run.sh docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[-v|--volume[=[[HOST-DIR:]CONTAINER-DIR[:OPTIONS]]]]</span><br><span class="line">          Create a bind mount. If you specify, -v /HOST-DIR:/CONTAINER-DIR, Docker</span><br><span class="line">          bind mounts /HOST-DIR in the host to /CONTAINER-DIR in the Docker</span><br><span class="line">          container.</span><br><span class="line">-v /data00/home/liujun.sun/aosp-6.0.1_r80/build-test.sh:/usr/local/bin/run.sh:ro</span><br><span class="line">        ro:read-only mode</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-e Set environment variables</span><br><span class="line">-i, --interactive=true|false</span><br><span class="line">          Keep STDIN open even if not attached. The default is false.</span><br><span class="line">          保证容器中STDIN是开启的</span><br><span class="line">-t, --tty=true|false</span><br><span class="line">          Allocate a pseudo-TTY. The default is false.</span><br><span class="line">          告诉Docker为要创建的容器分配一个伪tty终端。这样，新创建的容器才能提供一个交互式shell。</span><br><span class="line">--rm true|false</span><br><span class="line">    Automatically remove the container when it exits. The default is false.</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>删除所有容器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用参数&quot;&gt;&lt;a href=&quot;#常用参数&quot; class=&quot;headerlink&quot; title=&quot;常用参数&quot;&gt;&lt;/a&gt;常用参数&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="docker" scheme="https://vforkliu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Android ClassLoader</title>
    <link href="https://vforkliu.github.io/2019/05/15/Android-ClassLoader/"/>
    <id>https://vforkliu.github.io/2019/05/15/Android-ClassLoader/</id>
    <published>2019-05-15T02:38:54.000Z</published>
    <updated>2019-05-15T08:37:46.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/libcore/libart/src/main/java/java/lang/Class.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">AnnotatedElement</span>, <span class="title">GenericDeclaration</span>, <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; classForName(String className, <span class="keyword">boolean</span> shouldInitialize,</span><br><span class="line">        ClassLoader classLoader) <span class="keyword">throws</span> ClassNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="VMClassLoader"><a href="#VMClassLoader" class="headerlink" title="VMClassLoader"></a>VMClassLoader</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/libcore/libart/src/main/java/java/lang/VMClassLoader.java</span></span><br><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VMClassLoader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">static</span> Class <span class="title">findLoadedClass</span><span class="params">(ClassLoader cl,String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BootClassLoader"><a href="#BootClassLoader" class="headerlink" title="BootClassLoader"></a>BootClassLoader</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/libcore/libart/src/main/java/java/lang/ClassLoader.java#762</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BootClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/libcore/libart/src/main/java/java/lang/ClassLoader.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BaseDexClassLoader"><a href="#BaseDexClassLoader" class="headerlink" title="BaseDexClassLoader"></a>BaseDexClassLoader</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DexPathList"><a href="#DexPathList" class="headerlink" title="DexPathList"></a>DexPathList</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://androidxref.com/6.0.1_r10/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="android" scheme="https://vforkliu.github.io/tags/android/"/>
    
      <category term="classloader" scheme="https://vforkliu.github.io/tags/classloader/"/>
    
  </entry>
  
  <entry>
    <title>android progressbar circle</title>
    <link href="https://vforkliu.github.io/2019/05/13/android-progressbar-circle/"/>
    <id>https://vforkliu.github.io/2019/05/13/android-progressbar-circle/</id>
    <published>2019-05-13T06:37:26.000Z</published>
    <updated>2019-05-13T09:10:55.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">[</span>"<span class="attr">rectangle</span>" | "<span class="attr">oval</span>" | "<span class="attr">line</span>" | "<span class="attr">ring</span>"] </span></span><br><span class="line"><span class="tag">    <span class="attr">android:innerRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:innerRadiusRatio</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:thickness</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:thicknessRatio</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:useLevel</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topRightRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomLeftRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomRightRadius</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:angle</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:centerX</span>=<span class="string">"float"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:centerY</span>=<span class="string">"float"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:centerColor</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:endColor</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gradientRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:startColor</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:type</span>=<span class="string">[</span>"<span class="attr">linear</span>" | "<span class="attr">radial</span>" | "<span class="attr">sweep</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:useLevel</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">padding</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:left</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:top</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:right</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottom</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:height</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dashWidth</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dashGap</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>android:innerRadius : 指定圆环内圆的半径</p><p>android:innerRadiusRatio :该值是以比例的形式来指定内圆半径。内圆半径等于该shape的宽除以该值。或者说该值的倒数代表了内圆半径占整个shape宽的比例。默认值是9。当该值等于2的时候，内圆就将占满整个shape，从而我们将看不到圆环。</p><p>android:thickness : 指定圆环的宽窄，也就是内圆与外圆的距离。</p><p>android:thicknessRatio : 以比例的形式来指定圆环的宽窄。其算法与innerRadiusRatio相同。</p><p>android:useLevel :值为true意味着这是一个levelListDrawable（关于levelListDrawable又是另一个话题了）。当我们要画一个圆环是，应当而且必须将该值设为false，否则会看不到画面。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://demonuts.com/circular-progress-bar/" target="_blank" rel="noopener">https://demonuts.com/circular-progress-bar/</a><br><a href="https://medium.com/@evanca/android-tutorial-for-beginners-create-a-pie-chart-with-xml-36e67dabe67f" target="_blank" rel="noopener">https://medium.com/@evanca/android-tutorial-for-beginners-create-a-pie-chart-with-xml-36e67dabe67f</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Shape&quot;&gt;&lt;a href=&quot;#Shape&quot; class=&quot;headerlink&quot; title=&quot;Shape&quot;&gt;&lt;/a&gt;Shape&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="android" scheme="https://vforkliu.github.io/tags/android/"/>
    
      <category term="progressbar" scheme="https://vforkliu.github.io/tags/progressbar/"/>
    
  </entry>
  
  <entry>
    <title>Java 知识点</title>
    <link href="https://vforkliu.github.io/2019/05/13/Java-Tips/"/>
    <id>https://vforkliu.github.io/2019/05/13/Java-Tips/</id>
    <published>2019-05-13T03:06:28.000Z</published>
    <updated>2019-05-14T08:59:01.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>变长参数是 Java 的一个语法糖，本质上还是基于数组的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(String... args)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(String[] args)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Method signature</span></span><br><span class="line">([Ljava/lang/String;)V <span class="comment">// public void foo(String[] args)</span></span><br></pre></td></tr></table></figure></p><p>注意事项：</p><ul><li>可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数</li><li>由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数</li><li>Java的可变参数，会被编译器转型为一个数组</li></ul><h1 id="关键字-transient"><a href="#关键字-transient" class="headerlink" title="关键字 transient"></a>关键字 transient</h1><ul><li>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</li><li>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</li><li>被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;可变参数&quot;&gt;&lt;a href=&quot;#可变参数&quot; class=&quot;headerlink&quot; title=&quot;可变参数&quot;&gt;&lt;/a&gt;可变参数&lt;/h1&gt;&lt;p&gt;变长参数是 Java 的一个语法糖，本质上还是基于数组的实现：&lt;br&gt;&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
    
      <category term="Java" scheme="https://vforkliu.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
